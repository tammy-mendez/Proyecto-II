/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;


import bean.Articulo;
import bean.AuditoriaSistema;
import bean.CategoriaArticulo;
import bean.DetalleOrdenCompra;
import bean.OrdenCompra;
import bean.Proveedor;
import java.awt.EventQueue;
import java.beans.Beans;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.RollbackException;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author tammy
 */
public class OrdenDeCompra extends javax.swing.JFrame {
  int fila;
    int codigo;
    String descripcion, proveedor, fecha;
    int codArt;
    int cant;
     private char ch;
    private int id,i;
    private int resp;
    public static int categoria;
     private int  value;
  
    /**
     * Creates new form OCVisualizar
     */
    public OrdenDeCompra() {
        initComponents();
        masterTableDetalle.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("proyectoPU").createEntityManager();
        informerecepcionQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT i FROM Informerecepcion i");
        informerecepcionList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : informerecepcionQuery.getResultList();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT o FROM OrdenCompra o");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        detalleOrdenCompraQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT d FROM DetalleOrdenCompra d");
        detalleOrdenCompraList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : detalleOrdenCompraQuery.getResultList();
        panel_BuscarPS = new javax.swing.JPanel();
        lbl_BuscarPS = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbl_valor = new javax.swing.JLabel();
        tf_valor = new javax.swing.JTextField();
        lbl_filtro = new javax.swing.JLabel();
        list_filtros = new javax.swing.JComboBox();
        btn_buscar = new javax.swing.JButton();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        lbl_nombreCateg4 = new javax.swing.JLabel();
        tf_orden = new javax.swing.JTextField();
        lbl_nombreCateg7 = new javax.swing.JLabel();
        tf_proveedor = new javax.swing.JTextField();
        btn_aceptar = new javax.swing.JButton();
        lbl_nombreCateg8 = new javax.swing.JLabel();
        tf_fecha = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btn_cancelar = new javax.swing.JButton();
        btn_guardar = new javax.swing.JButton();
        btn_modificar = new javax.swing.JButton();
        masterScrollPane1 = new javax.swing.JScrollPane();
        masterTableDetalle = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel_BuscarPS.setBackground(new java.awt.Color(0, 153, 255));
        panel_BuscarPS.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        lbl_BuscarPS.setFont(new java.awt.Font("Corbel", 1, 30)); // NOI18N
        lbl_BuscarPS.setForeground(new java.awt.Color(255, 255, 255));
        lbl_BuscarPS.setText("Ordenes de Compra");

        javax.swing.GroupLayout panel_BuscarPSLayout = new javax.swing.GroupLayout(panel_BuscarPS);
        panel_BuscarPS.setLayout(panel_BuscarPSLayout);
        panel_BuscarPSLayout.setHorizontalGroup(
            panel_BuscarPSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_BuscarPSLayout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(lbl_BuscarPS)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_BuscarPSLayout.setVerticalGroup(
            panel_BuscarPSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_BuscarPSLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_BuscarPS)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_valor.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        lbl_valor.setText("Valor:");

        tf_valor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_valorKeyTyped(evt);
            }
        });

        lbl_filtro.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        lbl_filtro.setText("Buscar por:");

        list_filtros.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Codigo", "Proveedor", "Articulo" }));
        list_filtros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_filtrosMouseClicked(evt);
            }
        });
        list_filtros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list_filtrosActionPerformed(evt);
            }
        });

        btn_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/zoom.png"))); // NOI18N
        btn_buscar.setText("Buscar");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });
        btn_buscar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                btn_buscarFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(lbl_filtro)
                .addGap(18, 18, 18)
                .addComponent(list_filtros, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(lbl_valor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tf_valor, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_buscar)
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_filtro)
                    .addComponent(list_filtros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_valor)
                    .addComponent(tf_valor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_buscar))
                .addContainerGap())
        );

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codOrden}"));
        columnBinding.setColumnName("Cod Orden");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codProveedor.razonSocial}"));
        columnBinding.setColumnName("Proveedor");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${fecha}"));
        columnBinding.setColumnName("Fecha");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                masterTableMouseClicked(evt);
            }
        });
        masterScrollPane.setViewportView(masterTable);

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_nombreCateg4.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        lbl_nombreCateg4.setText("Codigo Orden Compra:");

        tf_orden.setEnabled(false);
        tf_orden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_ordenActionPerformed(evt);
            }
        });
        tf_orden.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_ordenKeyTyped(evt);
            }
        });

        lbl_nombreCateg7.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        lbl_nombreCateg7.setText("Proveedor:");

        tf_proveedor.setEnabled(false);

        btn_aceptar.setText("Cambiar");
        btn_aceptar.setEnabled(false);
        btn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aceptarActionPerformed(evt);
            }
        });

        lbl_nombreCateg8.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        lbl_nombreCateg8.setText("Fecha:");

        tf_fecha.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lbl_nombreCateg7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tf_proveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_aceptar)
                        .addGap(161, 161, 161))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_nombreCateg4)
                            .addComponent(lbl_nombreCateg8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_orden, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tf_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_nombreCateg4)
                    .addComponent(tf_orden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_nombreCateg8))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_aceptar)
                    .addComponent(tf_proveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_nombreCateg7))
                .addGap(36, 36, 36))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btn_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete.png"))); // NOI18N
        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        btn_guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar.png"))); // NOI18N
        btn_guardar.setText("Guardar");
        btn_guardar.setEnabled(false);
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        btn_modificar.setText("Modificar");
        btn_modificar.setEnabled(false);
        btn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(btn_modificar)
                .addGap(18, 18, 18)
                .addComponent(btn_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_cancelar)
                .addGap(25, 25, 25))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_cancelar)
                        .addComponent(btn_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        masterTableDetalle.setEnabled(false);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, detalleOrdenCompraList, masterTableDetalle);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codArticulo.nombre}"));
        columnBinding.setColumnName("Articulo");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cantidadPedida}"));
        columnBinding.setColumnName("Cantidad Pedida");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cantidadRecibida}"));
        columnBinding.setColumnName("Cantidad Recibida");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterTableDetalle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                masterTableDetalleMouseClicked(evt);
            }
        });
        masterScrollPane1.setViewportView(masterTableDetalle);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_BuscarPS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(masterScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(masterScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panel_BuscarPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(masterScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tf_valorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_valorKeyTyped
        // TODO add your handling code here:
        if(list_filtros.getSelectedItem()=="Proveedor" ){
            ch=evt.getKeyChar();
            if(Character.isDigit(ch)){
                getToolkit().beep();
                evt.consume();
            }
            if(list_filtros.getSelectedItem()=="Articulo" ){
            ch=evt.getKeyChar();
            if(Character.isDigit(ch)){
                getToolkit().beep();
                evt.consume();
            }
        }}else{
            if(list_filtros.getSelectedItem()=="Codigo"){
                ch=evt.getKeyChar();
                if(!Character.isDigit(ch)){
                    getToolkit().beep();
                    evt.consume();
                }

            }
        }
    }//GEN-LAST:event_tf_valorKeyTyped

    private void list_filtrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_filtrosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_list_filtrosMouseClicked

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        // TODO add your handling code here:
        if (tf_valor.getText().length()==0){
            JOptionPane.showMessageDialog(null,"Ingrese algún valor para efectuar la búsqueda", "Advertencia",JOptionPane.ERROR_MESSAGE);
            return;
        }else{
            if(list_filtros.getSelectedItem()=="Codigo"){
               //System.out.print("anda=");
                id=Integer.parseInt(tf_valor.getText());
                query=entityManager.createNamedQuery( "OrdenCompra.findByCodOrden");
                query.setParameter("codOrden", id);
                List<OrdenCompra> oc=query.getResultList();
                if (oc.isEmpty()){
                    JOptionPane.showMessageDialog(null,"Código de orden de compra inexistente", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(oc);

            }
            else if (list_filtros.getSelectedItem()=="Proveedor"){
                query = entityManager.createNativeQuery( "SELECT * FROM orden_compra oc"
                         + " INNER JOIN proveedor p "
                  //  + "proveedor p "
                    + " on oc.cod_proveedor=p.codigoProveedor "
                    + " WHERE p.razonSocial LIKE "
                    //SELECT p FROM Proveedor p WHERE p.razonSocial
                    +"'%"+tf_valor.getText()+"%'", OrdenCompra.class);
                List<OrdenCompra> ar = query.getResultList();
                if (ar.size()==0){
                    JOptionPane.showMessageDialog(null," No existen Ordenes de Compra para el Proveedor", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(ar);
            }
            else if (list_filtros.getSelectedItem()=="Articulo"){
                query = entityManager.createNativeQuery( "select * from orden_compra oc"
                         + " join detalle_orden_compra doc "
                    + " on oc.cod_orden=doc.cod_orden "
                    + " join articulo a "   
                    +" on a.codigoArticulo=doc.cod_articulo "
                    + " WHERE a.nombre LIKE "
                    +"'%"+tf_valor.getText()+"%'", OrdenCompra.class);
                List<OrdenCompra> ar = query.getResultList();
                if (ar.size()==0){
                    JOptionPane.showMessageDialog(null," No existen Ordenes de Compra para el Articulo", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(ar);
            }
        }
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void btn_buscarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_buscarFocusLost
        // TODO add your handling code here:
        tf_valor.setText(null);
    }//GEN-LAST:event_btn_buscarFocusLost

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked
         masterTableDetalle.setVisible(false);
       btn_modificar.setEnabled(true);
        fila=masterTable.getSelectedRow();
        codigo=(Integer) masterTable.getValueAt(fila, 0);
        proveedor= (String) masterTable.getValueAt(fila, 1);
        fecha = (String) masterTable.getValueAt(fila, 2);
        OrdenCompra oc = obtenerOrden(codigo);
        detalle_oc(oc);
       

        
        tf_orden.setText(Integer.toString(codigo));
        tf_proveedor.setText(proveedor);
        tf_fecha.setText(fecha);
    }//GEN-LAST:event_masterTableMouseClicked
public  void detalle_oc(OrdenCompra cod){
                //id=Integer.parseInt(tf_valor.getText());
                detalleOrdenCompraQuery=entityManager.createNamedQuery( "DetalleOrdenCompra.findByCodOrden");
                detalleOrdenCompraQuery.setParameter("codOrden", cod);
                List<DetalleOrdenCompra> oc=detalleOrdenCompraQuery.getResultList();
                if (oc.isEmpty()){
                    JOptionPane.showMessageDialog(null,"Código de orden de compra inexistente", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                detalleOrdenCompraList.clear();
                detalleOrdenCompraList.addAll(oc);
                masterTableDetalle.setVisible(true);
        
    } 

    private void list_filtrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list_filtrosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_list_filtrosActionPerformed

    private void tf_ordenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_ordenKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_tf_ordenKeyTyped

    private void btn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aceptarActionPerformed
        // TODO add your handling code here:
        new OrdenCompraDialogo(this, true).setVisible(true);
       
    }//GEN-LAST:event_btn_aceptarActionPerformed

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        // TODO add your handling code here:
        String antes;
        String despues;
        int codigo;
        resp=  JOptionPane.showConfirmDialog(null,"Desea guardar los cambios?", "Confirmar Modificación",JOptionPane.YES_NO_OPTION );
        if (resp==JOptionPane.YES_OPTION){
            // entityManager.getTransaction().begin();
            query=entityManager.createNamedQuery("OrdenCompra.findByCodOrden");
            query.setParameter("codOrden",Integer.parseInt(tf_orden.getText()));
            List<OrdenCompra> oc=query.getResultList();
            //antes de los cambios
            antes=oc.get(0).toString();
            OrdenCompra o = new OrdenCompra();
            o.setCodOrden(Integer.parseInt(tf_orden.getText()));
            o.setFecha((tf_fecha.getText()));
            Proveedor p = (Proveedor) obtenerProveedor(tf_proveedor.getText());
            o.setCodProveedor(p);
            
            entityManager.getTransaction().begin();
            entityManager.merge(o);
            entityManager.flush();
            despues=o.toString();
            
            //actualizar detalle orden compra
            actualizarDetallesOrdenCompra(Integer.parseInt(tf_orden.getText()));
            
            //registramos los datos necesarios para la auditoria
            AuditoriaSistema as=new AuditoriaSistema();
            as.setAccion("Modificación");
            as.setTabla("Orden Compra");
            //trabajamos con la fecha
            Date fecha1=new Date();
            DateFormat formato1=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            as.setFechaHora(formato1.format(fecha1));
            as.setUsuario(LoginView.nombreUsuario);
            as.setAntes(antes);
            as.setDespues(despues);
            entityManager.persist(as);
            entityManager.getTransaction().commit();
          
            JOptionPane.showMessageDialog(null, "Modificación Exitosa");
        /*    resp=  JOptionPane.showConfirmDialog(null,"Desea imprimir la orden de compra?", "Confirmar Modificación",JOptionPane.YES_NO_OPTION );
        if (resp==JOptionPane.YES_OPTION){
            imprimir(Integer.parseInt(tf_orden.getText()));
        }*/
          refrescar();
        } 
    }//GEN-LAST:event_btn_guardarActionPerformed

    private void btn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarActionPerformed
     //validar que ya se recibio todos los articulos
        id=Integer.parseInt(tf_orden.getText().toString());
        detalleOrdenCompraQuery=entityManager.createNativeQuery("select * from orden_compra oc "
                      +"join detalle_orden_compra dc "+
                      "on oc.cod_orden=dc.cod_orden "+
                      "where oc.cod_orden="+id, DetalleOrdenCompra.class);
                     value=0;
                      List<DetalleOrdenCompra> dc=detalleOrdenCompraQuery.getResultList();
                      if (!dc.isEmpty()){
                          for (int con=0;con<dc.size();con++){
                              if (dc.get(con).getCantidadPedida()==dc.get(con).getCantidadRecibida()){
                                  value++;
                              }
                          }
                          if (value==dc.size()){
                          JOptionPane.showMessageDialog(null,"Ya se registro la recepcion total de los articulos, No se puede Modificar", "Error",JOptionPane.ERROR_MESSAGE);
                          }
                          else{
                                Proveedor p = (Proveedor) obtenerProveedor(tf_proveedor.getText());
                                categoria= p.getCodigoCategoria().getCodCategoria();
                                tf_proveedor.setEnabled(false);
                                btn_guardar.setEnabled(true);
                                btn_aceptar.setEnabled(true);
                                btn_modificar.setEnabled(false);
                          }
                      }
    }//GEN-LAST:event_btn_modificarActionPerformed

    private void tf_ordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_ordenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_ordenActionPerformed

    private void masterTableDetalleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableDetalleMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_masterTableDetalleMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrdenDeCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrdenDeCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrdenDeCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrdenDeCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
       java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame=new OrdenDeCompra();
                frame.setVisible(true);
                frame.setTitle("Orden Compra");
                frame.setLocationRelativeTo(null);
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }
        });
    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_aceptar;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JButton btn_modificar;
    private java.util.List<bean.DetalleOrdenCompra> detalleOrdenCompraList;
    private javax.persistence.Query detalleOrdenCompraQuery;
    private javax.persistence.EntityManager entityManager;
    private java.util.List<bean.Informerecepcion> informerecepcionList;
    private javax.persistence.Query informerecepcionQuery;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lbl_BuscarPS;
    private javax.swing.JLabel lbl_filtro;
    private javax.swing.JLabel lbl_nombreCateg4;
    private javax.swing.JLabel lbl_nombreCateg7;
    private javax.swing.JLabel lbl_nombreCateg8;
    private javax.swing.JLabel lbl_valor;
    private java.util.List<bean.OrdenCompra> list;
    private javax.swing.JComboBox list_filtros;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JScrollPane masterScrollPane1;
    public static javax.swing.JTable masterTable;
    public static javax.swing.JTable masterTableDetalle;
    private javax.swing.JPanel panel_BuscarPS;
    private javax.persistence.Query query;
    public static javax.swing.JTextField tf_fecha;
    public static javax.swing.JTextField tf_orden;
    public static javax.swing.JTextField tf_proveedor;
    private javax.swing.JTextField tf_valor;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public  void detalle_oc(int cod){
                //id=Integer.parseInt(tf_valor.getText());
                detalleOrdenCompraQuery=entityManager.createNamedQuery( "DetalleOrdenCompra.findByCodOrden");
                detalleOrdenCompraQuery.setParameter("codOrden", cod);
                List<DetalleOrdenCompra> oc=detalleOrdenCompraQuery.getResultList();
                if (oc.isEmpty()){
                    JOptionPane.showMessageDialog(null,"Código de orden de compra inexistente", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                detalleOrdenCompraList.clear();
                detalleOrdenCompraList.addAll(oc);
                masterTableDetalle.setVisible(true);
        
    } 

    private void imprimir(int codigo) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       System.out.print(codigo);
        query= entityManager.createNamedQuery("OrdenCompra.findByCodOrden");
        query.setParameter("codOrden", codigo);
        List<OrdenCompra>fact=query.getResultList();
         if(fact.isEmpty()){
             JOptionPane.showMessageDialog(null,"No se encuentra", "Aviso",JOptionPane.INFORMATION_MESSAGE);
                   return;
                   
         }
         else{
              try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/hotel db", "root", "1234");
            HashMap par = new HashMap();//no definimos ningún parámetro por eso lo dejamos así
           // Map parametros=new HashMap();
            par.put("CodigoOrden",codigo );
            JasperPrint jp = JasperFillManager.fillReport("C:/proyecto/src/reportes/OrdenCompra.jasper", par,con);//el primer parámetro es el camino del archivo, se cambia esta dirección por la dirección del archivo .jasper
            JasperViewer jv = new JasperViewer(jp,false);//C:\proyecto\src\reportes
            jv.setVisible(true);
            jv.setTitle("Orden de Compra");
         //    Image icon = new ImageIcon(getClass().getResource("/imagenes/hotel2.png")).getImage();
           //  jv.setIconImage(icon);
            jv.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
         }
    }
   
private Proveedor obtenerProveedor(String nombre){
        EntityManagerFactory fact = Persistence.createEntityManagerFactory("proyectoPU");
        EntityManager ema = fact.createEntityManager();
        Query query = ema.createNamedQuery("Proveedor.findByRazonSocial");
        query.setParameter("razonSocial", tf_proveedor.getText());
        List<Proveedor> p = query.getResultList();
        Proveedor nom = null;
        try{
            nom = p.get(0);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e);
        }catch(NullPointerException e){
            System.out.println(e);
        }catch(Exception e){
            System.out.println("Algo pasó");
        }
        
        ema.close();
        return nom;
    }
private OrdenCompra obtenerOrdenCompra(int cod){
        EntityManagerFactory fact = Persistence.createEntityManagerFactory("proyectoPU");
        EntityManager ema = fact.createEntityManager();
        Query query = ema.createNamedQuery("OrdenCompra.findByCodOrden");
        query.setParameter("codOrden", cod);
        List<OrdenCompra> o = query.getResultList();
        OrdenCompra nom = null;
        try{
            nom = o.get(0);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e);
        }catch(NullPointerException e){
            System.out.println(e);
        }catch(Exception e){
            System.out.println("Algo pasó");
        }
        
        ema.close();
        return nom;
    }
    private void actualizarDetallesOrdenCompra(int codigo) {
    detalleOrdenCompraQuery=entityManager.createNativeQuery("select * from detalle_orden_compra "
                                                    +"where cod_orden="+codigo, DetalleOrdenCompra.class);
      List<DetalleOrdenCompra> cps=detalleOrdenCompraQuery.getResultList();
      if (!cps.isEmpty()){
          for (i=0;i<cps.size();i++){
            
              DetalleOrdenCompra doc = new DetalleOrdenCompra();
              doc.setCantidadPedida(cps.get(i).getCantidadPedida());
              doc.setCodArticulo(cps.get(i).getCodArticulo());
              doc.setCodDetalle(cps.get(i).getCodDetalle());
              OrdenCompra oc = obtenerOrdenCompra(codigo);
              doc.setCodOrden(oc);
              doc.setEstado("solicitado");
              entityManager.merge(doc);
              entityManager.flush();

          }
        
        
    }}
    private OrdenCompra obtenerOrden(int codigo){
        EntityManagerFactory fact = Persistence.createEntityManagerFactory("proyectoPU");
        EntityManager ema = fact.createEntityManager();
        Query query = ema.createNamedQuery("OrdenCompra.findByCodOrden");
        query.setParameter("codOrden", codigo);
        List<OrdenCompra> a = query.getResultList();
        OrdenCompra nom = null;
        try{
            nom = a.get(0);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e);
        }catch(NullPointerException e){
            System.out.println(e);
        }catch(Exception e){
            System.out.println("Algo pasó");
        }
        
        ema.close();
        return nom;
    }

    private void refrescar() {
        tf_fecha.setText(null);
        tf_orden.setText(null);
        tf_proveedor.setText(null);
        tf_valor.setText(null);
        btn_aceptar.setEnabled(false);
        btn_guardar.setEnabled(false);
        btn_modificar.setEnabled(false);
        masterTableDetalle.setVisible(false);
        query=entityManager.createNamedQuery( "OrdenCompra.findAll");
        List<OrdenCompra> oc=query.getResultList();
        list.clear();
        list.addAll(oc);

    }

}
