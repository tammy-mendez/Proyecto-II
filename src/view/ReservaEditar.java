/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import bean.AuditoriaSistema;
import bean.Cliente;
import bean.ConsumoProSer;
import bean.Correo;
import bean.FacturaCobro;
import bean.Habitacion;
import bean.ProductoServicio;
import bean.Reserva;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Vladimir
 */
public class ReservaEditar extends javax.swing.JFrame {
    private Reserva reserva;
    private int diferencia;
    private String condicion;
    private int dias;
    public static int monto_fac;
    private int fila;
    public Date auxIn ;
    public Date auxOut;
    private String datos[]=new String[3];
    FacturaCobro f=new FacturaCobro();
    public static Reserva reservaLocal = new Reserva();
    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    DecimalFormat formatea = new DecimalFormat("###,###,###,###,###.##");
    /**
     * Creates new form ReservaEditar
     */
    public ReservaEditar() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("proyectoPU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT r FROM Reserva r");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        panel_CrearReserva = new javax.swing.JPanel();
        lbl_BuscarRol = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btn_cancelar = new javax.swing.JButton();
        btn_modificar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tf_cedulaCliente = new javax.swing.JTextField();
        tf_cliente = new javax.swing.JTextField();
        lbl_codReserva = new javax.swing.JLabel();
        tf_codReserva = new javax.swing.JTextField();
        lbl_presupuesto = new javax.swing.JLabel();
        tf_presupuesto = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jc_checkin = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jc_checkout = new com.toedter.calendar.JDateChooser();
        btn_buscar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        tf_categoriaHabitacion = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        tf_precioCategoria = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tf_numeroHabitacion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tf_cantidadPersonas = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tf_montoTotal = new javax.swing.JTextField();
        lbl_anticipar = new javax.swing.JLabel();
        tf_anticipar = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tf_montoAbonado = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        tf_valor = new javax.swing.JTextField();
        lbl_valor = new javax.swing.JLabel();
        lbl_filtro = new javax.swing.JLabel();
        list_filtros = new javax.swing.JComboBox();
        btn_buscar1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(797, 682));
        setResizable(false);

        panel_CrearReserva.setBackground(new java.awt.Color(0, 153, 255));
        panel_CrearReserva.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        lbl_BuscarRol.setFont(new java.awt.Font("Corbel", 1, 30)); // NOI18N
        lbl_BuscarRol.setForeground(new java.awt.Color(255, 255, 255));
        lbl_BuscarRol.setText("Modificar Reserva");

        javax.swing.GroupLayout panel_CrearReservaLayout = new javax.swing.GroupLayout(panel_CrearReserva);
        panel_CrearReserva.setLayout(panel_CrearReservaLayout);
        panel_CrearReservaLayout.setHorizontalGroup(
            panel_CrearReservaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_CrearReservaLayout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addComponent(lbl_BuscarRol)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_CrearReservaLayout.setVerticalGroup(
            panel_CrearReservaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_CrearReservaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_BuscarRol)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btn_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete.png"))); // NOI18N
        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        btn_modificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar.png"))); // NOI18N
        btn_modificar.setText("Guardar");
        btn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(btn_modificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(btn_cancelar)
                .addGap(32, 32, 32))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        jLabel2.setText(" Cliente:");

        tf_cedulaCliente.setEditable(false);
        tf_cedulaCliente.setBackground(new java.awt.Color(0, 153, 255));
        tf_cedulaCliente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tf_cedulaCliente.setForeground(new java.awt.Color(255, 255, 255));
        tf_cedulaCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_cedulaClienteFocusLost(evt);
            }
        });

        tf_cliente.setEditable(false);
        tf_cliente.setBackground(new java.awt.Color(0, 153, 255));
        tf_cliente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tf_cliente.setForeground(new java.awt.Color(255, 255, 255));

        lbl_codReserva.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        lbl_codReserva.setText("CÃ³digo Reserva:");

        tf_codReserva.setEditable(false);
        tf_codReserva.setBackground(new java.awt.Color(0, 153, 255));
        tf_codReserva.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tf_codReserva.setForeground(new java.awt.Color(255, 255, 255));

        lbl_presupuesto.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        lbl_presupuesto.setText("SegÃºn Presupuesto nÂ°:");

        tf_presupuesto.setEditable(false);
        tf_presupuesto.setBackground(new java.awt.Color(0, 153, 255));
        tf_presupuesto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tf_presupuesto.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        jLabel1.setText("Check In:");

        jLabel5.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        jLabel5.setText("Check Out:");

        jc_checkout.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jc_checkoutFocusLost(evt);
            }
        });

        btn_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar.png"))); // NOI18N
        btn_buscar.setText("Buscar HabitaciÃ³n");
        btn_buscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_buscarMouseClicked(evt);
            }
        });
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        jLabel6.setText("CategorÃ­a HabitaciÃ³n:");

        tf_categoriaHabitacion.setEditable(false);
        tf_categoriaHabitacion.setBackground(new java.awt.Color(0, 153, 255));
        tf_categoriaHabitacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tf_categoriaHabitacion.setForeground(new java.awt.Color(255, 255, 255));

        jLabel11.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        jLabel11.setText("Precio de CategorÃ­a:");

        tf_precioCategoria.setEditable(false);
        tf_precioCategoria.setBackground(new java.awt.Color(0, 153, 255));
        tf_precioCategoria.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tf_precioCategoria.setForeground(new java.awt.Color(255, 255, 255));

        jLabel7.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        jLabel7.setText("NÂ° HabitaciÃ³n:");

        tf_numeroHabitacion.setEditable(false);
        tf_numeroHabitacion.setBackground(new java.awt.Color(0, 153, 255));
        tf_numeroHabitacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tf_numeroHabitacion.setForeground(new java.awt.Color(255, 255, 255));
        tf_numeroHabitacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_numeroHabitacionFocusLost(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        jLabel3.setText("Cantidad  Personas:");

        tf_cantidadPersonas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_cantidadPersonasActionPerformed(evt);
            }
        });
        tf_cantidadPersonas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tf_cantidadPersonasKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_cantidadPersonasKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        jLabel8.setText("Monto Total (Gs.):");

        tf_montoTotal.setEditable(false);
        tf_montoTotal.setBackground(new java.awt.Color(0, 153, 255));
        tf_montoTotal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tf_montoTotal.setForeground(new java.awt.Color(255, 255, 255));
        tf_montoTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_montoTotalActionPerformed(evt);
            }
        });

        lbl_anticipar.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        lbl_anticipar.setText("Anticipar (Gs):");

        tf_anticipar.setEditable(false);
        tf_anticipar.setBackground(new java.awt.Color(0, 153, 255));
        tf_anticipar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tf_anticipar.setForeground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Candara", 1, 14)); // NOI18N
        jLabel4.setText("Monto Abonado:");

        tf_montoAbonado.setText("0");
        tf_montoAbonado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_montoAbonadoFocusLost(evt);
            }
        });
        tf_montoAbonado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf_montoAbonadoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_montoAbonadoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jc_checkin, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jc_checkout, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_buscar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl_codReserva)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf_codReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(lbl_presupuesto)
                        .addGap(18, 18, 18)
                        .addComponent(tf_presupuesto, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(tf_cedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tf_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_categoriaHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tf_montoAbonado, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tf_cantidadPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(tf_precioCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_numeroHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(tf_montoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbl_anticipar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_anticipar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tf_montoAbonado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tf_cedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tf_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel2))
                                .addGap(32, 32, 32)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_codReserva)
                                    .addComponent(tf_codReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_presupuesto)
                                    .addComponent(tf_presupuesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jc_checkin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jc_checkout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_buscar)
                                .addGap(2, 2, 2)))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tf_categoriaHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(tf_precioCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(tf_numeroHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tf_cantidadPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel8)
                            .addComponent(tf_montoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_anticipar)
                            .addComponent(tf_anticipar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setForeground(new java.awt.Color(204, 204, 255));

        tf_valor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_valorKeyTyped(evt);
            }
        });

        lbl_valor.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        lbl_valor.setText("Valor:");

        lbl_filtro.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        lbl_filtro.setText("Buscar por:");

        list_filtros.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Reserva", "Nombre", "Apellido", "HabitaciÃ³n", "CategorÃ­a", "CheckIn", "CheckOut", "Cedula" }));
        list_filtros.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                list_filtrosFocusLost(evt);
            }
        });

        btn_buscar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/zoom.png"))); // NOI18N
        btn_buscar1.setText("Buscar");
        btn_buscar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscar1ActionPerformed(evt);
            }
        });
        btn_buscar1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                btn_buscar1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lbl_filtro)
                .addGap(18, 18, 18)
                .addComponent(list_filtros, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(lbl_valor)
                .addGap(18, 18, 18)
                .addComponent(tf_valor, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(btn_buscar1)
                .addGap(53, 53, 53))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_filtro)
                    .addComponent(lbl_valor)
                    .addComponent(list_filtros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_valor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_buscar1))
                .addContainerGap())
        );

        masterTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codigoReserva}"));
        columnBinding.setColumnName(" Reserva");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codigoCliente.cedula}"));
        columnBinding.setColumnName(" Cliente");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codigoCliente.nombre}"));
        columnBinding.setColumnName("Nombre");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codigoCliente.apellido}"));
        columnBinding.setColumnName("Apellido");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${checkIn}"));
        columnBinding.setColumnName("Check In");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${checkOut}"));
        columnBinding.setColumnName("Check Out");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${numHabitacion.numero}"));
        columnBinding.setColumnName("Habitacion");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${numHabitacion.codigoCategoria.nombre}"));
        columnBinding.setColumnName("CategorÃ­a");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cantPersonas}"));
        columnBinding.setColumnName(" Personas");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${montoAbonado}"));
        columnBinding.setColumnName("Monto Abonado");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${montoTotal}"));
        columnBinding.setColumnName("Monto Total");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${numPresupuesto.numPresupuesto}"));
        columnBinding.setColumnName("Presupuesto");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                masterTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(masterTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panel_CrearReserva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(234, 234, 234)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(panel_CrearReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarActionPerformed
        // TODO add your handling code here:
        String antes;
        String despues;
        String letras;
         DateFormat form=new SimpleDateFormat("dd-MM-yyyy");
        java.util.Date fecha = new Date();
          if(tf_codReserva.getText().length()==0){
              JOptionPane.showMessageDialog(null,"Seleccione una reserva", "Error",JOptionPane.ERROR_MESSAGE);
                 return;
            }
        if ( (auxIn.equals(jc_checkin.getDate())
                && auxOut.equals(jc_checkout.getDate())
                ) || auxOut.after(jc_checkout.getDate())){
                if ((jc_checkin.getDate() != null)
                    && (jc_checkout.getDate() != null)
                    && !tf_montoTotal.getText().equals("")
                    && !tf_cantidadPersonas.getText().equals("")
                    && !tf_numeroHabitacion.getText().equals("")
                    && !tf_numeroHabitacion.getText().equals("")
                    && !tf_cedulaCliente.getText().equals(""))
                {
                    if(jc_checkin.getDate().before(jc_checkout.getDate())
                        && desformatear(tf_montoAbonado.getText()) <= desformatear(tf_montoTotal.getText())
                        //      &&jc_checkin.getDate().after(fecha)
                        //      &&jc_checkin.getDate().after(fecha)
                    ){
                        String dIN = format.format(jc_checkin.getDate());
                        String dOUT = format.format(jc_checkout.getDate());
                        Date dateIn = null;
                        Date dateOut = null;
                        try {
                            dateIn = format.parse(dIN);
                            dateOut = format.parse(dOUT);
                        } catch (ParseException ex) {
                            System.out.println("Formateo de fechas fallido");
                        }

                        Habitacion habitacion = new Habitacion();
                        Cliente cliente  = obtenerCliente();
                        int respuesta = JOptionPane.showConfirmDialog(null, "Â¿Confirma el registro?");
                        if (respuesta == JOptionPane.YES_OPTION){
                            antes = reserva.toString();
                            entityManager.getTransaction().begin();
                            reservaLocal.setCodigoReserva(reserva.getCodigoReserva());
                            reservaLocal.setCantPersonas(Integer.parseInt(tf_cantidadPersonas.getText()));
                            reservaLocal.setCheckIn(dateIn);
                            reservaLocal.setCheckOut(dateOut);
                            reservaLocal.setNumPresupuesto(reserva.getNumPresupuesto());
                            //reserva.setCheckOut(format.parse(format.format(jc_checkout.toString())));
                            reservaLocal.setCodigoCliente(cliente);
                            if (tf_montoAbonado.getText().equals(""))
                                reservaLocal.setMontoAbonado(0);
                            else
                                reservaLocal.setMontoAbonado(desformatear(tf_montoAbonado.getText()));
                                reservaLocal.setMontoTotal(desformatear(tf_montoTotal.getText()));
                                //consulta para obtener habitacion
                                query = entityManager.createNamedQuery("Habitacion.findByNumero");
                                query.setParameter("numero", Integer.parseInt(tf_numeroHabitacion.getText()));
                                habitacion = (Habitacion)query.getSingleResult();
                                reservaLocal.setNumHabitacion(habitacion);
                                System.out.println("Monto Abonado Ahora "+reservaLocal.getMontoAbonado());
                                System.out.println("Monto Abonado Antes "+reserva.getMontoAbonado());
                                monto_fac=ReservaEditar.reservaLocal.getMontoAbonado()-reserva.getMontoAbonado();
                                System.out.println("Monto Factura "+monto_fac);
                                entityManager.merge(reservaLocal);
                                entityManager.flush();
                                //despues de los cambios
                                despues = reservaLocal.toString();
                                //guardamos el consumo
                             if(!"0".equals(tf_montoAbonado.getText())){
                                int codigo=reservaLocal.getCodigoReserva();
                                //saldo de la reserva
                                diferencia=desformatear(tf_montoTotal.getText())-desformatear(tf_montoAbonado.getText());
                                query=entityManager.createNativeQuery("SELECT * FROM consumo_pro_ser c "
                                 + "INNER JOIN reserva r "
                                + "on r.codigoReserva = c.codigoReserva "
                                + "WHERE c.codigoReserva="
                                +codigo, ConsumoProSer.class);
                                List<ConsumoProSer> cps=query.getResultList();
                                if(!cps.isEmpty()){
                                   query= entityManager.createNativeQuery( "SELECT * FROM producto_servicio p "
                                    + "WHERE p.nombre LIKE "
                                    +"'%saldo de reserva%'", ProductoServicio.class);
                                    List<ProductoServicio> p=query.getResultList();
                                    if(p.isEmpty()){
                                     JOptionPane.showMessageDialog(null,"Registre un Producto/Servicio con el nombre de 'saldo de reserva'"
                                            + "para guardar el saldo de la reserva", "Error",JOptionPane.ERROR_MESSAGE);
                                            return;
                                    }
                                    if(diferencia==0){
                                            ConsumoProSer con=entityManager.find(ConsumoProSer.class, cps.get(0).getCodigoConsumo() );
                                             entityManager.remove(con);
                                             entityManager.flush();
                                    }else{
                                         ConsumoProSer cp=new ConsumoProSer();
                                         cp.setCodigoConsumo(cps.get(0).getCodigoConsumo());
                                         System.out.print(cps.get(0).getCodigoConsumo());
                                         cp.setCodigoReserva(reservaLocal);
                                         cp.setCantidad(dias);
                                         cp.setFecha(form.format(fecha));
                                         cp.setTotal(diferencia);
                                         cp.setCodigoPS(p.get(0));
                                         entityManager.merge(cp);
                                         entityManager.flush(); 
                                    }
                                    

                                }else{
                                        query= entityManager.createNativeQuery( "SELECT * FROM producto_servicio p "
                                         + "WHERE p.nombre LIKE "
                                         +"'%saldo de reserva%'", ProductoServicio.class);
                                         List<ProductoServicio> p=query.getResultList();
                                         if(p.size()==0){
                                                 JOptionPane.showMessageDialog(null,"Registre un Producto/Servicio con el nombre de 'saldo de reserva'"
                                                 + "para guardar el saldo de la reserva", "Error",JOptionPane.ERROR_MESSAGE);
                                                 return;
                                         }
                                         if(diferencia!=0){
                                              ConsumoProSer cp=new ConsumoProSer();
                                                cp.setCodigoReserva(reservaLocal);
                                                cp.setCantidad(dias);
                                                cp.setTotal(diferencia);
                                                cp.setFecha(form.format(fecha));
                                                cp.setCodigoPS(p.get(0));
                                                entityManager.persist(cp);
                                                entityManager.flush();
                                         }        
                                }
                              
                                 //generamos la factura en caso de que haya aportado algo
                              /*  if(monto_fac!=0){
                                        f.setCodigoReserva(reserva);
                                        f.setConcepto("anticipo de reserva");
                                       if("".equals(reserva.getCodigoCliente().getRuc())){
                                             f.setRucCliente(reserva.getCodigoCliente().getCedula());
                                       }else{
                                             f.setRucCliente(reserva.getCodigoCliente().getRuc());
                                       }
                                       f.setFechaEmision(form.format(fecha));
                                       f.setTotal(monto_fac);
                                       f.setTipoFactura((String) list_pago.getSelectedItem());
                                       entityManager.persist(f);
                                       entityManager.flush();
                                        if("CrÃ©dito/Cheque".equals(f.getTipoFactura()) || "CrÃ©dito/Tarjeta".equals(f.getTipoFactura()) ){
                                           condicion="CrÃ©dito";

                                       }else{
                                           condicion="Contado";
                                       }
                                }*/
                               

                            }
                            //creacion de auditoria de sistema
                            AuditoriaSistema as=new AuditoriaSistema();
                            as.setAccion("ModificaciÃ³n");
                            as.setTabla("Reserva");
                            as.setAntes(antes);
                            as.setDespues(despues);
                            //trabajamos con la fecha
                            DateFormat formato=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
                            as.setFechaHora(formato.format(fecha));
                            as.setUsuario(LoginView.nombreUsuario);
                            entityManager.persist(as);
                            entityManager.flush();
                            entityManager.getTransaction().commit();
                           // ema.close();
                            JOptionPane.showMessageDialog(null, "ModificaciÃ³n Exitosa");
                              //actualizamos la tabla
                                list.remove(reserva);
                                list.add(reservaLocal);
                            //mostramos la factura
                            if(!"0".equals(tf_montoAbonado.getText()) && monto_fac!=0){
                               
                                 RegistrarDetalleCobro.invoca="Editar Reserva";
                                 formaPago();
                             /*    try
                                {
                                     //convertimos el numero en letras
                                    NumberToText nt=new NumberToText();
                                    letras=nt.convertirLetras(f.getTotal());
                                    System.out.print(letras);
                                    Class.forName("com.mysql.jdbc.Driver");
                                    Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/hotel db", "root", "user");
                                    HashMap par = new HashMap();//no definimos ningÃºn parÃ¡metro por eso lo dejamos asÃ­
                                    Map parametros=new HashMap();
                                    System.out.print(f.getNumFactura());
                                    par.put("Letras", letras);
                                    par.put("NumFactura",f.getNumFactura() );
                                    par.put("Saldo", diferencia);
                                    par.put("Condicion", condicion);
                                    JasperPrint jp = JasperFillManager.fillReport("C:/Proyecto-II/src/reportes/facturaAnticipo.jasper", par,con);//el primer parÃ¡metro es el camino del archivo, se cambia esta direcciÃ³n por la direcciÃ³n del archivo .jasper
                                    JasperViewer jv = new JasperViewer(jp,false);
                                    jv.setVisible(true);
                                     jv.setTitle("Factura de Anticipo de Reserva");
                                     Image icon = new ImageIcon(getClass().getResource("/imagenes/hotel2.png")).getImage();
                                    jv.setIconImage(icon);
                                    jv.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                                }
                                catch(Exception e)
                                {
                                    e.printStackTrace();
                                }*/
                            }
                            resetear();
                           enviarDatosEmail();
                        }
                        else{
                            this.dispose();
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "Datos Invalidos o Incompletos "
                            + "impiden el registro");
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Datos Invalidos o Incompletos "
                        + "impiden el registro");
                }
        }else{
                JOptionPane.showMessageDialog(null, "Debe buscar una habitaciÃ³n "
                        + "para las nuevas fechas");

           
        }
    }//GEN-LAST:event_btn_modificarActionPerformed
     private void formaPago(){
        String args[]=new String[1];
        args[0]="Forma de Pago";
        RegistrarDetalleCobro.main(args);
        
    }
    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void tf_cedulaClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_cedulaClienteFocusLost
        // TODO add your handling code here:
    
    }//GEN-LAST:event_tf_cedulaClienteFocusLost

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        if(jc_checkout.getDate().after(auxOut)){
            tf_numeroHabitacion.setText("");
            tf_categoriaHabitacion.setText("");
            tf_precioCategoria.setText("");

        }
        tf_montoTotal.setText("");
        tf_anticipar.setText(null);
        SimpleDateFormat formatLocal = new SimpleDateFormat("yyyy-MM-dd");

        java.util.Date fecha = new Date();
        //JOptionPane.showMessageDialog(null, auxIn.equals(auxOut));
        try {
            fecha = obtenerFechaDia();
        } catch (ParseException ex) {
            System.out.println("Problemas con fechas");
        }
        if ((jc_checkin.getDate() != null)
            && (jc_checkout.getDate() != null)){
            if( (jc_checkin.getDate().before(jc_checkout.getDate()))
                //&& (fecha.before(jc_checkin.getDate()))
                //&& (fecha.before(jc_checkout.getDate()))
            ){
                String LocalIn = formatLocal.format(jc_checkin.getDate());
                String localOut = formatLocal.format(jc_checkout.getDate());
                if(!LocalIn.equals(localOut)){
                    auxIn = jc_checkin.getDate();
                    auxOut = jc_checkout.getDate();
                    VerEstadodeHabitaciones.llamadaEditarReserva = "Invocado";
                    VerEstadodeHabitaciones.llamadaCrearReserva = "";
                    VerEstadodeHabitaciones.llamadaGenerarPresupuesto = "";
                    verEstadosHabitaciones();
                }
                //creaciÃ³n de ventana
                else{
                    JOptionPane.showMessageDialog(null, "Fechas Iguales");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Fechas Invalidas");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Fechas Invalidas");
        }

    }//GEN-LAST:event_btn_buscarActionPerformed

    private void btn_buscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_buscarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_buscarMouseClicked

    private void tf_numeroHabitacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_numeroHabitacionFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_numeroHabitacionFocusLost

    private void tf_montoTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_montoTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_montoTotalActionPerformed

    private void jc_checkoutFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jc_checkoutFocusLost
        // TODO add your handling code here:
        //no acciona
        JOptionPane.showMessageDialog(null, "Algo paso");
        if (jc_checkin.getDate().after(jc_checkout.getDate()))
        JOptionPane.showMessageDialog(null, jc_checkin.getDate());
    }//GEN-LAST:event_jc_checkoutFocusLost

    private void tf_montoAbonadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_montoAbonadoKeyTyped
        // TODO add your handling code here:
        char ch=evt.getKeyChar();
        if(!Character.isDigit(ch)){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tf_montoAbonadoKeyTyped

    private void tf_montoAbonadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_montoAbonadoFocusLost
        // TODO add your handling code here
        if(tf_montoAbonado.getText().length()==0){
            tf_montoAbonado.setText("0");
        }

    }//GEN-LAST:event_tf_montoAbonadoFocusLost

    private void tf_cantidadPersonasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_cantidadPersonasKeyTyped
        // TODO add your handling code here:
        char ch=evt.getKeyChar();
        if(!Character.isDigit(ch)){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tf_cantidadPersonasKeyTyped

    private void tf_valorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_valorKeyTyped
        // TODO add your handling code here:
        char ch;
        if (list_filtros.getSelectedItem()=="HabitaciÃ³n" || list_filtros.getSelectedItem()=="Reserva"){
            ch=evt.getKeyChar();
            if(!Character.isDigit(ch)){
                getToolkit().beep();
                evt.consume();
            }
        }
        if (list_filtros.getSelectedItem()=="CategorÃ­a" || list_filtros.getSelectedItem()=="Nombre" || list_filtros.getSelectedItem()=="Apellido"){
            ch=evt.getKeyChar();
            if(Character.isDigit(ch)){
                getToolkit().beep();
                evt.consume();
            }
        }

    }//GEN-LAST:event_tf_valorKeyTyped

    private void list_filtrosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_list_filtrosFocusLost
        // TODO add your handling code here:
        if(list_filtros.getSelectedItem()=="CheckIn" || list_filtros.getSelectedItem()=="CheckOut"){
            Date fecha= new Date();
            DateFormat formato=new SimpleDateFormat("yyyy-MM-dd");
            tf_valor.setText(formato.format(fecha));
        }
    }//GEN-LAST:event_list_filtrosFocusLost

    private void btn_buscar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscar1ActionPerformed
        // TODO add your handling code here:
        if (tf_valor.getText().length()==0){
            JOptionPane.showMessageDialog(null,"Ingrese algÃºn valor para efectuar la bÃºsqueda", "Advertencia",JOptionPane.ERROR_MESSAGE);
            return;
        }
        else{
            if (list_filtros.getSelectedItem()=="Nombre"){
                query = entityManager.createNativeQuery( "SELECT * FROM reserva r "
                    + "INNER JOIN cliente c "
                    + "on r.codigoCliente = c.codigoCliente "
                    + "WHERE c.nombre LIKE "
                    +"'%"+tf_valor.getText()+"%'", Reserva.class);
                List<Reserva> r = query.getResultList();
                if (r.isEmpty()){
                    JOptionPane.showMessageDialog(null, "Nombre inexistente","Error",JOptionPane.ERROR_MESSAGE );
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(r);
            }
            else if (list_filtros.getSelectedItem()=="Apellido"){
                query = entityManager.createNativeQuery( "SELECT * FROM reserva r "
                    + "INNER JOIN cliente c "
                    + "on r.codigoCliente = c.codigoCliente "
                    + "WHERE c.apellido LIKE "
                    +"'%"+tf_valor.getText()+"%'", Reserva.class);
                List<Reserva> r = query.getResultList();
                if (r.isEmpty()){
                    JOptionPane.showMessageDialog(null, "Apellido inexistente","Error",JOptionPane.ERROR_MESSAGE );
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(r);
            }
            else if(list_filtros.getSelectedItem()=="CheckIn"){
                query=entityManager.createNativeQuery("SELECT * FROM reserva "
                    + "WHERE STR_TO_DATE(checkIn, '%Y-%m-%d')= "
                    +"'"+tf_valor.getText()+"'", Reserva.class);
                List<Reserva> a=query.getResultList();
                if(a.size()==0){
                    JOptionPane.showMessageDialog(null,"No se han encontrado registros para la fecha", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(a);
                return;
            }
            else if(list_filtros.getSelectedItem()=="CheckOut"){
                query=entityManager.createNativeQuery("SELECT * FROM reserva "
                    + "WHERE STR_TO_DATE(checkOut, '%Y-%m-%d')= "
                    +"'"+tf_valor.getText()+"'", Reserva.class);
                List<Reserva> a=query.getResultList();
                if(a.size()==0){
                    JOptionPane.showMessageDialog(null,"No se han encontrado registros para la fecha", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(a);
                return;
            }
            else if(list_filtros.getSelectedItem()=="HabitaciÃ³n"){
                query = entityManager.createNativeQuery( "SELECT * FROM reserva r "
                    + "INNER JOIN habitacion h "
                    + "on r.numHabitacion = h.numero "
                    + "WHERE r.numHabitacion = "
                    +tf_valor.getText(), Reserva.class);
                List<Reserva> a=query.getResultList();
                if(a.size()==0){
                    JOptionPane.showMessageDialog(null,"No se han encontrado registros para la habitaciÃ³n", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(a);
                return;
            }
            else if(list_filtros.getSelectedItem()=="Reserva"){
                query=entityManager.createNamedQuery("Reserva.findByCodigoReserva");
                query.setParameter("codigoReserva", Integer.parseInt(tf_valor.getText()));
                List<Reserva> r =query.getResultList();
                if(r.size()==0){
                    JOptionPane.showMessageDialog(null,"Codigo de Reserva inexistente", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(r);
            }
            else if(list_filtros.getSelectedItem()=="CategorÃ­a"){
                query=entityManager.createNativeQuery("SELECT * FROM reserva r "
                    +"INNER JOIN habitacion h "
                    +"ON r.numHabitacion=h.numero "
                    +"INNER JOIN categ_habitacion c "
                    +"ON h.codigoCategoria=c.codigoCategoria "
                    + "WHERE c.nombre LIKE "
                    +"'%"+tf_valor.getText()+"%'", Reserva.class);
                List<Reserva> a=query.getResultList();
                if(a.isEmpty()){
                    JOptionPane.showMessageDialog(null,"No se han encontrado registros para la categorÃ­a de habitaciÃ³n", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(a);
                return;
            }
               else if (list_filtros.getSelectedItem()=="Cedula"){
                query = entityManager.createNativeQuery( "SELECT * FROM reserva r "
                    + "INNER JOIN cliente c "
                    + "on r.codigoCliente = c.codigoCliente "
                    + "WHERE c.cedula LIKE "
                    +"'%"+tf_valor.getText()+"%'", Reserva.class);
                List<Reserva> r = query.getResultList();
                if (r.isEmpty()){
                    JOptionPane.showMessageDialog(null, "Cedula de cliente inexistente","Error",JOptionPane.ERROR_MESSAGE );
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(r);
            }
        }
    }//GEN-LAST:event_btn_buscar1ActionPerformed

    private void btn_buscar1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_buscar1FocusLost
        // TODO add your handling code here:
        tf_valor.setText(null);
    }//GEN-LAST:event_btn_buscar1FocusLost

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked
        // TODO add your handling code here:
         fila = masterTable.getSelectedRow();
         reserva = obtenerReserva(fila);
         inicializarReserva();
         auxIn=reserva.getCheckIn();
         auxOut=reserva.getCheckOut();
    }//GEN-LAST:event_masterTableMouseClicked

    private void tf_cantidadPersonasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_cantidadPersonasKeyPressed
        // TODO add your handling code here:
        DecimalFormat deci= new DecimalFormat("0");
        String d;
        int anticipo;
        java.util.Date fecha = new Date();
         if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                 if(jc_checkin.getDate() != null
                    && jc_checkout.getDate() != null
                    && !tf_cantidadPersonas.getText().equals("")
                    && !tf_precioCategoria.getText().equals("")){
                    if (jc_checkin.getDate().before(jc_checkout.getDate())){
                        final float MILLSECS_PER_DAY = 24 * 60 * 60 * 1000;
                        long cantidadPersonas = Integer.parseInt(tf_cantidadPersonas.getText());
                        long precioxnoche = desformatear(tf_precioCategoria.getText());
                        float cantidadDias = (jc_checkout.getDate().getTime() - jc_checkin.getDate().getTime())/MILLSECS_PER_DAY;
                        System.out.println("Cantidad de dias devuelto"+" "+cantidadDias);
                        d=deci.format(cantidadDias);
                        d=d.replaceAll(",",".");
                        cantidadDias=Float.parseFloat(d);
                        System.out.println("Cantidad de dias calculado"+" "+cantidadDias);
                        long precioTotal = (long) (cantidadPersonas * precioxnoche * cantidadDias);
                        tf_montoTotal.setText(formato(precioTotal));
                        anticipo=(int) (precioTotal*0.5);
                        tf_anticipar.setText(formateador(anticipo));
                    }else{
                        JOptionPane.showMessageDialog(null, "Fecha de checkin posterior a checkout");
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Datos sin especificar");
                }
         }
          if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE){
              tf_montoTotal.setText(null);
              tf_anticipar.setText(null);
          }
    }//GEN-LAST:event_tf_cantidadPersonasKeyPressed

    private void tf_cantidadPersonasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_cantidadPersonasActionPerformed
        // TODO add your handling code here:
        
       
    }//GEN-LAST:event_tf_cantidadPersonasActionPerformed

    private void tf_montoAbonadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_montoAbonadoKeyReleased
        //
         String valor;
         int numero;
        if(tf_montoAbonado.getText().length()!=0){
            valor=tf_montoAbonado.getText();
            numero=(desformatear(valor));
            tf_montoAbonado.setText(formateador(numero));
        }
       
    }//GEN-LAST:event_tf_montoAbonadoKeyReleased
        private Reserva obtenerReserva(int fila) {
            query = entityManager.createNamedQuery("Reserva.findByCodigoReserva");
            query.setParameter("codigoReserva", Integer.parseInt(masterTable.getValueAt(fila, 0).toString()) );
            Reserva r = null;
            try{
               r = (Reserva)query.getSingleResult();
               System.out.println(reserva);
            }catch(javax.persistence.NoResultException e){
                System.out.println(reserva);
            }
            return r;
        }
  private void enviarDatosEmail(){
        boolean resultado;
        if(reservaLocal.getCodigoCliente().getEmail()!=null){
                datos[0]=reserva.getCodigoCliente().getEmail();
                datos[1]="Detalles de  Reserva ";
                datos[2]=" BIENVENIDO AL HOTEL SANTA MARÃA"+"\n "
                +"SR/SRA: "+reservaLocal.getCodigoCliente().getNombre()+" "+reserva.getCodigoCliente().getApellido()+"\n " 
               +"Su reserva es la nÂ°: "+reservaLocal.getCodigoReserva()+"\n " 
               +"Check In: "+" "+format.format(reservaLocal.getCheckIn())+"\n"+"Check Out: "+" "+format.format(reserva.getCheckOut())+"\n "
               +"HabitaciÃ³n: "+" "+reservaLocal.getNumHabitacion().getNumero()+"\n"+"CategorÃ­a: "+" "+reservaLocal.getNumHabitacion().getCodigoCategoria().getNombre()+"\n"
               +"Monto HabitaciÃ³n: "+" "+formateador(reservaLocal.getNumHabitacion().getCodigoCategoria().getCostoxnoche())+"\n"+"Monto Total: "+" "+formateador(reservaLocal.getMontoTotal())+"\n"+"Monto Abonado: "+" "+formateador(reserva.getMontoAbonado())+"\n"
               +"Debe abonar el 30% del monto total de la reserva, de lo contrario perderÃ¡ la misma";
                Correo c=new Correo();
                resultado=c.enviarCorreo(datos);
                System.out.println(resultado);
        }
            
}
    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReservaEditar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReservaEditar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReservaEditar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReservaEditar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame=new ReservaEditar();
                frame.setVisible(true);
                frame.setTitle("Modificar Reserva");
                Image icon = new ImageIcon(getClass().getResource("/imagenes/hotel2.png")).getImage();
                frame.setIconImage(icon);
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.setLocationRelativeTo(null);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_buscar1;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_modificar;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    public static com.toedter.calendar.JDateChooser jc_checkin;
    public static com.toedter.calendar.JDateChooser jc_checkout;
    private javax.swing.JLabel lbl_BuscarRol;
    private javax.swing.JLabel lbl_anticipar;
    private javax.swing.JLabel lbl_codReserva;
    private javax.swing.JLabel lbl_filtro;
    private javax.swing.JLabel lbl_presupuesto;
    private javax.swing.JLabel lbl_valor;
    private java.util.List<bean.Reserva> list;
    private javax.swing.JComboBox list_filtros;
    private javax.swing.JTable masterTable;
    private javax.swing.JPanel panel_CrearReserva;
    private javax.persistence.Query query;
    private javax.swing.JTextField tf_anticipar;
    public static javax.swing.JTextField tf_cantidadPersonas;
    public static javax.swing.JTextField tf_categoriaHabitacion;
    public static javax.swing.JTextField tf_cedulaCliente;
    private javax.swing.JTextField tf_cliente;
    private javax.swing.JTextField tf_codReserva;
    private javax.swing.JTextField tf_montoAbonado;
    private javax.swing.JTextField tf_montoTotal;
    public static javax.swing.JTextField tf_numeroHabitacion;
    public static javax.swing.JTextField tf_precioCategoria;
    private javax.swing.JTextField tf_presupuesto;
    private javax.swing.JTextField tf_valor;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
     private Date obtenerFechaDia() throws ParseException{
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        Date fecha = new Date();
         /*int anho = fecha.get(Calendar.YEAR);
        int mes = fecha.get(Calendar.MONTH + 1);
        int dia = fecha.get(Calendar.DAY_OF_MONTH);
        String fechaActual = Integer.toString(anho) +"-"+Integer.toString(mes)
                 +"-"+Integer.toString(dia);
         */        
         return format.parse(format.format(fecha));
     }
        
     private void verEstadosHabitaciones(){
        JFrame ventana = new VerEstadodeHabitaciones();
        VerEstadodeHabitaciones.llamadaEditarReserva = "Invocado";
        ventana.setLocationRelativeTo(null);
        ventana.setTitle("Ver Estado de Habitaciones");
         Image icon = new ImageIcon(getClass().getResource("/imagenes/hotel2.png")).getImage();
        ventana.setIconImage(icon);
        ventana.setVisible(true); 
    }   
    private Cliente obtenerCliente() {
         EntityManagerFactory fact = Persistence.createEntityManagerFactory("proyectoPU");
         EntityManager ema = fact.createEntityManager();
         Query clienteQuery = ema.createNamedQuery("Cliente.findByCedula");
         clienteQuery.setParameter("cedula", tf_cedulaCliente.getText());
         Cliente cliente = null;
         try{
            cliente = (Cliente)clienteQuery.getSingleResult();
            System.out.println(cliente);
         }catch(javax.persistence.NoResultException e){
             System.out.println(cliente);
         }
         ema.close();
         return cliente;
     }
    
    private void inicializarReserva(){
        int anticipo;
        int total;
        tf_codReserva.setText(Integer.toString(reserva.getCodigoReserva()));
        if(reserva.getNumPresupuesto()==null){
            tf_presupuesto.setText("Sin presupuesto");
        }else{
            tf_presupuesto.setText(Integer.toString(reserva.getNumPresupuesto().getNumPresupuesto()));
        }
        tf_cedulaCliente.setText(reserva.getCodigoCliente().getCedula());
        tf_cliente.setText(reserva.getCodigoCliente().getNombre()+" "+reserva.getCodigoCliente().getApellido());
        tf_cantidadPersonas.setText(Integer.toString(reserva.getCantPersonas()));
        tf_montoAbonado.setText(formateador(reserva.getMontoAbonado()));
        tf_montoTotal.setText(formateador(reserva.getMontoTotal()));
        if(tf_montoAbonado.getText().equals(tf_montoTotal.getText())){
            tf_montoAbonado.setEnabled(false);
        }
        tf_numeroHabitacion.setText(Integer.toString(reserva.getNumHabitacion().getNumero()));
        tf_precioCategoria.setText(formateador(reserva.getNumHabitacion().getCodigoCategoria().getCostoxnoche()));
        tf_categoriaHabitacion.setText(reserva.getNumHabitacion().getCodigoCategoria().getNombre());
        jc_checkin.setDate(reserva.getCheckIn());
        jc_checkout.setDate(reserva.getCheckOut());
        total=desformatear(tf_montoTotal.getText());
        anticipo= (int)(total*0.5);
        tf_anticipar.setText(formateador(anticipo));
        
    }
    private void resetear(){
        tf_codReserva.setText(null);
        tf_presupuesto.setText(null);
        tf_cedulaCliente.setText(null);
        tf_cliente.setText(null);
        tf_cantidadPersonas.setText(null);
        tf_montoAbonado.setText(null);
        tf_montoTotal.setText(null);
        tf_numeroHabitacion.setText(null);
        tf_precioCategoria.setText(null);
        tf_categoriaHabitacion.setText(null);
        jc_checkin.setDate(null);
        jc_checkout.setDate(null);
        tf_anticipar.setText(null);
        
    }
     private String formateador(int num){
        String formateado;
        formateado=formatea.format(num);
        return formateado;
    }
      private String formato(long num){
        String formateado;
        formateado=formatea.format(num);
        return formateado;
    }
    private int desformatear(String num){
        int numero;
        num=num.replace(".", "");
        numero=Integer.parseInt(num);
        return numero;
    }
}
