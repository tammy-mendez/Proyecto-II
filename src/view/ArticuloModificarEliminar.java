/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import bean.Articulo;
import bean.AuditoriaSistema;
import bean.CategoriaArticulo;
import bean.DetalleOrdenCompra;
import bean.MovimientoStock;
import bean.ProductoServicio;
import java.awt.EventQueue;
import java.beans.Beans;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.RollbackException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import bean.Proveedor;
import com.mxrck.autocompleter.TextAutoCompleter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
/**
 *
 * @author tammy
 */
public class ArticuloModificarEliminar extends  javax.swing.JFrame {
       public  static String cate;
    private char ch;
    private int id;
    private int fila;
    private int codigo;
    private String nombre, articuloProducto;
    private String prov, categoria, tipo;
    private int cantidadMinima;
    private int cantidadStock;
    private int cantidadMaxima;
    private int costoArticulo, precioArticulo;
    private final  TextAutoCompleter textAutoCompleter1;
      
    private int resp,i;
    public ArticuloModificarEliminar() {
        initComponents();
        this.textAutoCompleter1 = new TextAutoCompleter(tf_proveedor);

        this.textAutoCompleter1.setMode(0);
 
        inicializarLista1();
        comboTipo.setVisible(false);
        combocat.setVisible(false);
        btn_aceptar.setVisible(false);
            }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("proyectoPU").createEntityManager();
        proveedorQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM Proveedor p");
        proveedorList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(proveedorQuery.getResultList());
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM Articulo a");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        categArticuloRenderizar1 = new renderizar.CategArticuloRenderizar();
        categoriaArticuloQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT c FROM CategoriaArticulo c");
        categoriaArticuloList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : categoriaArticuloQuery.getResultList();
        productoServicioQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM ProductoServicio p");
        productoServicioList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : productoServicioQuery.getResultList();
        jPanel3 = new javax.swing.JPanel();
        lbl_buscarC = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbl_valor = new javax.swing.JLabel();
        tf_valor = new javax.swing.JTextField();
        lbl_filtro = new javax.swing.JLabel();
        list_filtros = new javax.swing.JComboBox();
        btn_buscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        lbl_nombre = new javax.swing.JLabel();
        precioLabel = new javax.swing.JLabel();
        cantidadMinimaLabel = new javax.swing.JLabel();
        codigoProveedorLabel = new javax.swing.JLabel();
        tf_nombre = new javax.swing.JTextField();
        tf_cantidadMinima = new javax.swing.JTextField();
        tf_costo = new javax.swing.JTextField();
        tf_proveedor = new javax.swing.JTextField();
        cantidadMaximaLabel1 = new javax.swing.JLabel();
        tf_cantidadMaxima = new javax.swing.JTextField();
        combocat = new javax.swing.JComboBox();
        codigoProveedorLabel1 = new javax.swing.JLabel();
        btn_aceptar = new javax.swing.JButton();
        precioLabel1 = new javax.swing.JLabel();
        tf_precio = new javax.swing.JTextField();
        codigoProveedorLabel2 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox();
        lbl_codigo = new javax.swing.JLabel();
        tf_codigo = new javax.swing.JTextField();
        tf_categoria = new javax.swing.JTextField();
        tf_tipo = new javax.swing.JTextField();
        cantidadMinimaLabel1 = new javax.swing.JLabel();
        tf_cantidadStock = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btn_cancelar1 = new javax.swing.JButton();
        btn_guardar = new javax.swing.JButton();
        btn_modificar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        categArticuloRenderizar1.setText("categArticuloRenderizar1");

        jPanel3.setBackground(new java.awt.Color(0, 153, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        lbl_buscarC.setFont(new java.awt.Font("Corbel", 1, 30)); // NOI18N
        lbl_buscarC.setForeground(new java.awt.Color(255, 255, 255));
        lbl_buscarC.setText("Modificar/Eliminar Articulo");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(239, 239, 239)
                .addComponent(lbl_buscarC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_buscarC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_valor.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        lbl_valor.setText("Valor:");

        tf_valor.addKeyListener(formListener);

        lbl_filtro.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        lbl_filtro.setText("Buscar por:");

        list_filtros.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CÃ³digo", "Nombre", "Proveedor" }));
        list_filtros.addMouseListener(formListener);

        btn_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/zoom.png"))); // NOI18N
        btn_buscar.setText("Buscar");
        btn_buscar.addActionListener(formListener);
        btn_buscar.addFocusListener(formListener);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(lbl_filtro)
                .addGap(18, 18, 18)
                .addComponent(list_filtros, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(lbl_valor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tf_valor, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_buscar)
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_filtro)
                    .addComponent(list_filtros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_valor)
                    .addComponent(tf_valor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_buscar))
                .addContainerGap())
        );

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codigoArticulo}"));
        columnBinding.setColumnName("Codigo");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nombre}"));
        columnBinding.setColumnName("Descripcion");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cantidadStock}"));
        columnBinding.setColumnName("Cantidad Stock");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cantidadMinima}"));
        columnBinding.setColumnName("Cantidad Minima");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cantidadMaxima}"));
        columnBinding.setColumnName("Cantidad Maxima");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${costo}"));
        columnBinding.setColumnName("Costo");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codCategoria.descripcion}"));
        columnBinding.setColumnName("Categoria");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codigoProveedor.razonSocial}"));
        columnBinding.setColumnName("Proveedor");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${precio}"));
        columnBinding.setColumnName("Precio");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${tipo}"));
        columnBinding.setColumnName("Tipo");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterTable.addMouseListener(formListener);
        jScrollPane1.setViewportView(masterTable);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_nombre.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        lbl_nombre.setText("Nombre:");

        precioLabel.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        precioLabel.setText("Costo:");

        cantidadMinimaLabel.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        cantidadMinimaLabel.setText("Cantidad Stock:");

        codigoProveedorLabel.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        codigoProveedorLabel.setText("Categoria:");

        tf_nombre.setEnabled(false);
        tf_nombre.addFocusListener(formListener);
        tf_nombre.addKeyListener(formListener);

        tf_cantidadMinima.setEnabled(false);
        tf_cantidadMinima.addKeyListener(formListener);

        tf_costo.setEnabled(false);
        tf_costo.addKeyListener(formListener);

        tf_proveedor.setEnabled(false);
        tf_proveedor.addKeyListener(formListener);

        cantidadMaximaLabel1.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        cantidadMaximaLabel1.setText("Cantidad Maxima:");

        tf_cantidadMaxima.setEnabled(false);
        tf_cantidadMaxima.addFocusListener(formListener);
        tf_cantidadMaxima.addKeyListener(formListener);

        combocat.setEnabled(false);
        combocat.setRenderer(categArticuloRenderizar1);

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, categoriaArticuloList, combocat);
        bindingGroup.addBinding(jComboBoxBinding);

        combocat.addActionListener(formListener);
        combocat.addFocusListener(formListener);

        codigoProveedorLabel1.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        codigoProveedorLabel1.setText("Proveedor:");

        btn_aceptar.setText("Seleccionar");
        btn_aceptar.setEnabled(false);
        btn_aceptar.addActionListener(formListener);

        precioLabel1.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        precioLabel1.setText("Precio:");

        tf_precio.setEnabled(false);
        tf_precio.addKeyListener(formListener);

        codigoProveedorLabel2.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        codigoProveedorLabel2.setText("Tipo:");

        comboTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Insumo ", "Venta" }));
        comboTipo.setEnabled(false);
        comboTipo.addFocusListener(formListener);

        lbl_codigo.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        lbl_codigo.setText("Codigo:");

        tf_codigo.setEnabled(false);
        tf_codigo.addActionListener(formListener);

        tf_categoria.setEnabled(false);

        tf_tipo.setEnabled(false);

        cantidadMinimaLabel1.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        cantidadMinimaLabel1.setText("Cantidad Minima:");

        tf_cantidadStock.setEnabled(false);
        tf_cantidadStock.addFocusListener(formListener);
        tf_cantidadStock.addKeyListener(formListener);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_nombre)
                            .addComponent(codigoProveedorLabel)
                            .addComponent(lbl_codigo)
                            .addComponent(cantidadMinimaLabel1))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(tf_cantidadMinima, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tf_proveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(tf_costo, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(btn_aceptar))
                            .addComponent(tf_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tf_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(tf_categoria, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(combocat, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(9, 9, 9)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cantidadMaximaLabel1)
                                                    .addComponent(precioLabel1))
                                                .addGap(36, 36, 36)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(tf_precio, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tf_cantidadMaxima, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tf_cantidadStock, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(codigoProveedorLabel2)
                                                .addGap(115, 115, 115)
                                                .addComponent(tf_tipo)))
                                        .addGap(18, 18, 18)
                                        .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cantidadMinimaLabel)))))
                    .addComponent(precioLabel)
                    .addComponent(codigoProveedorLabel1))
                .addContainerGap(185, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_codigo)
                    .addComponent(tf_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_nombre)
                    .addComponent(tf_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cantidadMinimaLabel)
                    .addComponent(tf_cantidadStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_cantidadMinima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cantidadMaximaLabel1)
                    .addComponent(tf_cantidadMaxima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cantidadMinimaLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codigoProveedorLabel2)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(codigoProveedorLabel)
                        .addComponent(combocat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tf_categoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tf_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(precioLabel)
                            .addComponent(precioLabel1)
                            .addComponent(tf_precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(tf_costo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_aceptar)
                    .addComponent(codigoProveedorLabel1)
                    .addComponent(tf_proveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btn_cancelar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete.png"))); // NOI18N
        btn_cancelar1.setText("Cancelar");
        btn_cancelar1.addActionListener(formListener);

        btn_guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar.png"))); // NOI18N
        btn_guardar.setText("Guardar");
        btn_guardar.setEnabled(false);
        btn_guardar.addActionListener(formListener);

        btn_modificar.setText("Modificar");
        btn_modificar.setEnabled(false);
        btn_modificar.addActionListener(formListener);

        btn_eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trash.png"))); // NOI18N
        btn_eliminar.setText("Eliminar");
        btn_eliminar.setEnabled(false);
        btn_eliminar.addActionListener(formListener);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btn_modificar)
                .addGap(18, 18, 18)
                .addComponent(btn_guardar)
                .addGap(18, 18, 18)
                .addComponent(btn_eliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(btn_cancelar1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_cancelar1)
                    .addComponent(btn_modificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_eliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(236, 236, 236)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, java.awt.event.KeyListener, java.awt.event.MouseListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == btn_buscar) {
                ArticuloModificarEliminar.this.btn_buscarActionPerformed(evt);
            }
            else if (evt.getSource() == combocat) {
                ArticuloModificarEliminar.this.combocatActionPerformed(evt);
            }
            else if (evt.getSource() == btn_aceptar) {
                ArticuloModificarEliminar.this.btn_aceptarActionPerformed(evt);
            }
            else if (evt.getSource() == tf_codigo) {
                ArticuloModificarEliminar.this.tf_codigoActionPerformed(evt);
            }
            else if (evt.getSource() == btn_cancelar1) {
                ArticuloModificarEliminar.this.btn_cancelar1ActionPerformed(evt);
            }
            else if (evt.getSource() == btn_guardar) {
                ArticuloModificarEliminar.this.btn_guardarActionPerformed(evt);
            }
            else if (evt.getSource() == btn_modificar) {
                ArticuloModificarEliminar.this.btn_modificarActionPerformed(evt);
            }
            else if (evt.getSource() == btn_eliminar) {
                ArticuloModificarEliminar.this.btn_eliminarActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == btn_buscar) {
                ArticuloModificarEliminar.this.btn_buscarFocusLost(evt);
            }
            else if (evt.getSource() == tf_nombre) {
                ArticuloModificarEliminar.this.tf_nombreFocusLost(evt);
            }
            else if (evt.getSource() == tf_cantidadMaxima) {
                ArticuloModificarEliminar.this.tf_cantidadMaximaFocusLost(evt);
            }
            else if (evt.getSource() == combocat) {
                ArticuloModificarEliminar.this.combocatFocusLost(evt);
            }
            else if (evt.getSource() == comboTipo) {
                ArticuloModificarEliminar.this.comboTipoFocusLost(evt);
            }
            else if (evt.getSource() == tf_cantidadStock) {
                ArticuloModificarEliminar.this.tf_cantidadStockFocusLost(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == tf_valor) {
                ArticuloModificarEliminar.this.tf_valorKeyTyped(evt);
            }
            else if (evt.getSource() == tf_nombre) {
                ArticuloModificarEliminar.this.tf_nombreKeyTyped(evt);
            }
            else if (evt.getSource() == tf_cantidadMinima) {
                ArticuloModificarEliminar.this.tf_cantidadMinimaKeyTyped(evt);
            }
            else if (evt.getSource() == tf_costo) {
                ArticuloModificarEliminar.this.tf_costoKeyTyped(evt);
            }
            else if (evt.getSource() == tf_proveedor) {
                ArticuloModificarEliminar.this.tf_proveedorKeyTyped(evt);
            }
            else if (evt.getSource() == tf_cantidadMaxima) {
                ArticuloModificarEliminar.this.tf_cantidadMaximaKeyTyped(evt);
            }
            else if (evt.getSource() == tf_precio) {
                ArticuloModificarEliminar.this.tf_precioKeyTyped(evt);
            }
            else if (evt.getSource() == tf_cantidadStock) {
                ArticuloModificarEliminar.this.tf_cantidadStockKeyTyped(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == list_filtros) {
                ArticuloModificarEliminar.this.list_filtrosMouseClicked(evt);
            }
            else if (evt.getSource() == masterTable) {
                ArticuloModificarEliminar.this.masterTableMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == masterTable) {
                ArticuloModificarEliminar.this.masterTableMouseEntered(evt);
            }
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    private void tf_valorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_valorKeyTyped
        // TODO add your handling code here:
        if(list_filtros.getSelectedItem()=="Nombre" ){
            ch=evt.getKeyChar();
            if(Character.isDigit(ch)){
                getToolkit().beep();
                evt.consume();
            }
        }else{
            if(list_filtros.getSelectedItem()=="CÃ³digo"){
                ch=evt.getKeyChar();
                if(!Character.isDigit(ch)){
                    getToolkit().beep();
                    evt.consume();
                }

            }
        }
    }//GEN-LAST:event_tf_valorKeyTyped

    private void list_filtrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_filtrosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_list_filtrosMouseClicked

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        // TODO add your handling code here:
        if (tf_valor.getText().length()==0){
            JOptionPane.showMessageDialog(null,"Ingrese algÃºn valor para efectuar la bÃºsqueda", "Advertencia",JOptionPane.ERROR_MESSAGE);
            return;
        }else{
            if(list_filtros.getSelectedItem()=="CÃ³digo"){
                id=Integer.parseInt(tf_valor.getText());
                query=entityManager.createNamedQuery( "Articulo.findByCodigoArticulo");
                query.setParameter("codigoArticulo", id);
                List<Articulo> a=query.getResultList();
                if (a.isEmpty()){
                    JOptionPane.showMessageDialog(null,"CÃ³digo inexistente", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(a);

            }
         else if (list_filtros.getSelectedItem()=="Proveedor"){
                query = entityManager.createNativeQuery( "SELECT * FROM articulo a "
                    + "INNER JOIN proveedor p "
                    + "on a.codigoProveedor = p.codigoProveedor "
                    + "WHERE p.razonSocial LIKE "
                        //SELECT p FROM Proveedor p WHERE p.razonSocial
                    +"'%"+tf_valor.getText()+"%'", Articulo.class);
                List<Articulo> ar = query.getResultList();
                if (ar.size()==0){
                    JOptionPane.showMessageDialog(null," Nombre Proveedor Inexistente", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(ar);
            }
          
            if(list_filtros.getSelectedItem()=="Nombre"){
                query = entityManager.createNativeQuery( "SELECT * FROM articulo WHERE nombre LIKE "
                    +"'%"+tf_valor.getText()+"%'", Articulo.class);
                List<Articulo> a=query.getResultList();
                if (a.size()==0){
                    JOptionPane.showMessageDialog(null,"Nombre de articulo inexistente", "Error",JOptionPane.ERROR_MESSAGE);
                    tf_valor.setText(null);
                    return;
                }
                list.clear();
                list.addAll(a);

            }
            
        }
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void btn_buscarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_buscarFocusLost
        // TODO add your handling code here:
        tf_valor.setText(null);
    }//GEN-LAST:event_btn_buscarFocusLost

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked
        // TODO add your handling code here:
        btn_eliminar.setEnabled(true);
        btn_modificar.setEnabled(true);
                fila=masterTable.getSelectedRow();
                codigo=(Integer) masterTable.getValueAt(fila, 0);
                nombre=(String)masterTable.getValueAt(fila, 1);
                cantidadStock=(Integer)masterTable.getValueAt(fila, 2);
                cantidadMinima=(Integer)masterTable.getValueAt(fila, 3);
                cantidadMaxima=(Integer)masterTable.getValueAt(fila, 4);
                costoArticulo=(Integer)masterTable.getValueAt(fila, 5);
                categoria = (String)masterTable.getValueAt(fila, 6);
                prov = (String)masterTable.getValueAt(fila, 7);
                precioArticulo=(Integer)masterTable.getValueAt(fila, 8);
                tipo = (String)masterTable.getValueAt(fila, 9);
               
                tf_codigo.setText(String.valueOf(codigo));
                tf_nombre.setText(nombre);
                tf_cantidadStock.setText(String.valueOf(cantidadStock));
                tf_cantidadMinima.setText(String.valueOf(cantidadMinima));
                tf_cantidadMaxima.setText(String.valueOf(cantidadMaxima));
                tf_costo.setText(String.valueOf(costoArticulo));
                tf_categoria.setText(categoria);
                tf_proveedor.setText(prov);
                tf_precio.setText(String.valueOf(precioArticulo));
                 tf_tipo.setText(tipo);
 
    }//GEN-LAST:event_masterTableMouseClicked

    private void tf_nombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_nombreFocusLost
        // TODO add your handling code here:
        query=entityManager.createNamedQuery("Articulo.findByNombre");
        query.setParameter("nombre", tf_nombre.getText().toLowerCase());
        List<Articulo> art=query.getResultList();
        if(art.size()!=0){
            JOptionPane.showMessageDialog(null,"El nombre del articulo ya ha sido registrado", "Error",JOptionPane.ERROR_MESSAGE);
            tf_nombre.setText(null);
            tf_nombre.requestFocus();
            // return;
        }
    }//GEN-LAST:event_tf_nombreFocusLost

    private void tf_nombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_nombreKeyTyped
        // TODO add your handling code here:
        int limite=45;
        if(tf_nombre.getText().length()==limite){
            getToolkit().beep();
            evt.consume(); //se le ignora

        }
        /* ch=evt.getKeyChar();
        if(Character.isDigit(ch)){
            getToolkit().beep();
            evt.consume();
        }  */
    }//GEN-LAST:event_tf_nombreKeyTyped

    private void tf_cantidadMinimaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_cantidadMinimaKeyTyped
        // TODO add your handling code here:
        int limite=4;
        if(tf_cantidadMinima.getText().length()==limite){
            getToolkit().beep();
            evt.consume(); //se le ignora

        }
        ch=evt.getKeyChar();
        if(!Character.isDigit(ch)){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tf_cantidadMinimaKeyTyped

    private void tf_costoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_costoKeyTyped
        // TODO add your handling code here:
        int limite=6;
        if(tf_costo.getText().length()==limite){
            getToolkit().beep();
            evt.consume(); //se le ignora

        }
        ch=evt.getKeyChar();
        if(!Character.isDigit(ch)){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tf_costoKeyTyped

    private void tf_proveedorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_proveedorKeyTyped
        // TODO add your handling code here:
        ch=evt.getKeyChar();
        if(Character.isDigit(ch)){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tf_proveedorKeyTyped

    private void tf_cantidadMaximaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_cantidadMaximaFocusLost
        // TODO add your handling code here:
        if (  Integer.parseInt(tf_cantidadMinima.getText())> Integer.parseInt(tf_cantidadMaxima.getText())){
            JOptionPane.showMessageDialog(null,"La cantidad maxima debe ser mayor a la minima", "Error",JOptionPane.ERROR_MESSAGE);
            tf_cantidadMinima.setText(null);
            tf_cantidadMaxima.setText(null);
            tf_cantidadMinima.requestFocus();
            // return;
        }
    }//GEN-LAST:event_tf_cantidadMaximaFocusLost

    private void tf_cantidadMaximaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_cantidadMaximaKeyTyped
        // TODO add your handling code here:
        int limite=4;
        if(tf_cantidadMaxima.getText().length()==limite){
            getToolkit().beep();
            evt.consume(); //se le ignora

        }
        ch=evt.getKeyChar();
        if(!Character.isDigit(ch)){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tf_cantidadMaximaKeyTyped

    private void combocatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combocatActionPerformed
        // TODO add your handling code here:
        //    CategoriaArticulo c=(CategoriaArticulo) combocat.getSelectedItem();
        //setCodCategoria(c);

    }//GEN-LAST:event_combocatActionPerformed

    private void combocatFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_combocatFocusLost
        // TODO add your handling code here:
         CategoriaArticulo c1=(CategoriaArticulo) combocat.getSelectedItem();
                    
                  tf_categoria.setText(c1.getDescripcion());
    }//GEN-LAST:event_combocatFocusLost

    private void btn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aceptarActionPerformed
        // TODO add your handling code here:
        cate = tf_categoria.getText();
        // System.out.print(cate);
        new ProveedorCategoriaArticulo1(this, true).setVisible(true);
    }//GEN-LAST:event_btn_aceptarActionPerformed

    private void tf_precioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_precioKeyTyped
        // TODO add your handling code here:
        int limite=6;
        if(tf_precio.getText().length()==limite){
            getToolkit().beep();
            evt.consume(); //se le ignora

        }
        ch=evt.getKeyChar();
        if(!Character.isDigit(ch)){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tf_precioKeyTyped

    private void tf_codigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_codigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_codigoActionPerformed

    private void masterTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_masterTableMouseEntered

    private void tf_cantidadStockFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_cantidadStockFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_cantidadStockFocusLost

    private void tf_cantidadStockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_cantidadStockKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_cantidadStockKeyTyped

    private void btn_cancelar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelar1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_btn_cancelar1ActionPerformed

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        // TODO add your handling code here:
        String antes;
        String despues;
        if(tf_nombre.getText().length()==0 || tf_cantidadMinima.getText().length()==0 || tf_cantidadMaxima.getText().length()==0
            || tf_costo.getText().length()==0 || tf_proveedor.getText().length()==0 
        ){
            JOptionPane.showMessageDialog(null,"No se permiten campos con valores nulos", "Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        else{
            resp = JOptionPane.showConfirmDialog(null,"Desea guardar los cambios?", "Confirmar ModificaciÃ³n",JOptionPane.YES_NO_OPTION );
                if (resp==JOptionPane.YES_OPTION){
                    // entityManager.getTransaction().begin();
                    query=entityManager.createNamedQuery("Articulo.findByCodigoArticulo");
                    query.setParameter("codigoArticulo",Integer.parseInt(tf_codigo.getText()));
                    List<Articulo> ar=query.getResultList();
                    //antes de los cambios
                    antes=ar.get(0).toString();
                    articuloProducto=ar.get(0).getNombre();
                    Articulo a=new Articulo();
                    a.setCodigoArticulo(Integer.parseInt(tf_codigo.getText()));
                    a.setNombre(tf_nombre.getText().toLowerCase());
                    a.setCantidadMinima(Integer.parseInt(tf_cantidadMinima.getText()));
                    a.setCantidadMaxima(Integer.parseInt(tf_cantidadMaxima.getText()));
                    a.setCantidadStock(Integer.parseInt(tf_cantidadStock.getText()));
                    a.setCosto(Integer.parseInt(tf_costo.getText()));
                    a.setPrecio(Integer.parseInt(tf_precio.getText()));
                    Proveedor p1=(Proveedor) obtenerProveedor1(tf_proveedor.getText()) ;
                    a.setCodigoProveedor(p1);
                    CategoriaArticulo c=(CategoriaArticulo) combocat.getSelectedItem();
                    a.setTipo(comboTipo.getSelectedItem().toString());
                    a.setCodCategoria(c);

                    entityManager.getTransaction().begin();
                    entityManager.merge(a);
                    entityManager.flush();
                    despues=a.toString();
                    
                     //registramos los datos necesarios para la auditoria
                    entityManager.persist(registrarAuditoria("Modificar","Articulo", antes, despues));
                    if (Integer.parseInt(tf_cantidadStock.getText())<=Integer.parseInt(tf_cantidadMinima.getText())){

                        //genera detalle de la orden de compra
                        DetalleOrdenCompra detalleOC= new DetalleOrdenCompra();
                        detalleOC.setCantidadPedida(Integer.parseInt(tf_cantidadMaxima.getText())-Integer.parseInt(tf_cantidadStock.getText()));
                        detalleOC.setCodArticulo(a);
                        detalleOC.setCodProveedor(p1);
                        detalleOC.setEstado("pendiente");
                        entityManager.persist(detalleOC);
                        entityManager.flush();
                        
                    }
                     //registra producto/servicio
                      if (comboTipo.getSelectedItem()=="Venta"){
                  
                          ProductoServicio pr= (ProductoServicio) obtenerProducto(articuloProducto);
                          if (pr==null){
                              ProductoServicio prod = new ProductoServicio();
                                prod.setCosto(Integer.parseInt(tf_precio.getText()));
                                prod.setNombre(tf_nombre.getText().toLowerCase());
                                entityManager.merge(prod);
                                entityManager.flush();
                                despues=prod.toString();
                                entityManager.persist(registrarAuditoria("Crear","Producto", "No hay cambios", despues));
                          }
                          else{
                            antes=pr.toString();
                            ProductoServicio prod = new ProductoServicio();
                            prod.setCodigoPS(pr.getCodigoPS());
                            prod.setCosto(Integer.parseInt(tf_precio.getText()));
                            prod.setNombre(tf_nombre.getText().toLowerCase());
                            entityManager.merge(prod);
                            entityManager.flush();
                            despues=prod.toString();
                   
                    //registramos los datos necesarios para la auditoria
                    entityManager.persist(registrarAuditoria("Modificar","Producto", antes, despues));
                   }}
                   
                    entityManager.getTransaction().commit();
                    //entityManager.close();
                    JOptionPane.showMessageDialog(null, "ModificaciÃ³n Exitosa");
                   vaciar();
                   refrescar();
                }
            }
    }//GEN-LAST:event_btn_guardarActionPerformed

    private void btn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarActionPerformed
        // TODO add your handling code here:
        comboTipo.setVisible(true);
        combocat.setVisible(true);
        btn_aceptar.setVisible(true);
         comboTipo.setEnabled(true);
        combocat.setEnabled(true);
        btn_aceptar.setEnabled(true);
        btn_guardar.setEnabled(true);
        btn_eliminar.setEnabled(false);
        tf_cantidadMaxima.setEnabled(true);
        tf_cantidadMinima.setEnabled(true);
        tf_cantidadStock.setEnabled(false);
        tf_costo.setEnabled(true);
        tf_nombre.setEnabled(true);
        
        tf_tipo.setVisible(true);
        tf_categoria.setVisible(true);
        if ("Venta".equals(tf_tipo.getText())){
            tf_precio.setEnabled(true);
        }
        else{
            tf_precio.setText(String.valueOf(0));
        }
         btn_modificar.setEnabled(false);
        
    }//GEN-LAST:event_btn_modificarActionPerformed

    private void comboTipoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comboTipoFocusLost
        // TODO add your handling code here:
        tf_tipo.setText(comboTipo.getSelectedItem().toString());
         if (comboTipo.getSelectedItem()=="Venta"){
                   //registra producto/servicio
                  tf_precio.setEnabled(true);
                  
                   }
        else{
            tf_precio.setText(String.valueOf(0));
        }
    }//GEN-LAST:event_comboTipoFocusLost

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        // TODO add your handling code here:
        String valor;
        int codigo;
        codigo=Integer.parseInt(tf_codigo.getText());

        query=entityManager.createNativeQuery("select * from articulo a"
            +" inner join detalle_facturacompra f on "
            +" a.codigoArticulo=f.codArticulo"
            + " WHERE a.codigoArticulo="
            +codigo, Articulo.class);
        List<Articulo> arti=query.getResultList();
        if(!arti.isEmpty() ){
            JOptionPane.showMessageDialog(null, "Este articulo ya posee factura compra, no puede eliminar","Error",JOptionPane.ERROR_MESSAGE );
            this.dispose();
            return;
        }
        else{
            //posee orden compra
            query=entityManager.createNativeQuery("select * from articulo a "+
                "join detalle_orden_compra doc "+
                "on a.codigoArticulo=doc.cod_articulo "+
                "where a.codigoArticulo="+codigo, Articulo.class);
            List<Articulo> ar=query.getResultList();
            //posee movimiento stock
            query=entityManager.createNativeQuery("select * from articulo a "+
                "join movimiento_stock ms "+
                "on a.codigoArticulo=ms.codigoArticulo "
                +"where a.codigoArticulo="+codigo, MovimientoStock.class);
            List<Articulo> art=query.getResultList();
            if(!ar.isEmpty()|| !art.isEmpty()){
                JOptionPane.showMessageDialog(null, "Este articulo posee orden de compra asignadas y/o movimientos en el stock, si elimima eliminarÃ¡ la orden de compra y/o movimientos en el stock","Aviso",JOptionPane.INFORMATION_MESSAGE );
                resp=  JOptionPane.showConfirmDialog(null,"Esta seguro que desea eliminar?", "Confirmar EliminaciÃ³n",JOptionPane.YES_NO_OPTION );
                if(resp==JOptionPane.YES_OPTION){
                    entityManager.getTransaction().begin();
                    //elimina orden compra
                    query=entityManager.createNativeQuery("select * from detalle_orden_compra "+
                        "where cod_articulo="+codigo, DetalleOrdenCompra.class);
                    List<DetalleOrdenCompra> doc=query.getResultList();
                    if(doc.size()>=1){
                        for(i=0;i<doc.size();i++){
                            valor=doc.get(i).toString();
                            entityManager.remove(doc.get(i));
                            registrarAuditoria("Orden de Compra", "Eliminar",valor, " ");
                        }
                        entityManager.flush();
                    }
                    //elimina movimiento Articulo
                    query=entityManager.createNativeQuery("select * from movimiento_stock  "+
                        "where codigoArticulo="+codigo, MovimientoStock.class);
                    List<MovimientoStock> ms=query.getResultList();
                    if(ms.size()>=1){
                        for(i=0;i<ms.size();i++){
                            valor=ms.get(i).toString();
                            entityManager.remove(ms.get(i));
                            registrarAuditoria("Movimiento Stock","Eliminar",valor, " ");
                        }
                        entityManager.flush();
                    }
                    //elimina producto/servicio
                    productoServicioQuery=entityManager.createNativeQuery("select * from producto_servicio   "+
                        "where nombre="+"'"+tf_nombre.getText()+"'", ProductoServicio.class);
                    List<ProductoServicio> ps=productoServicioQuery.getResultList();
                    if(ps.size()>=1){
                        for(i=0;i<ps.size();i++){
                            valor=ps.get(i).toString();
                            entityManager.remove(ps.get(i));
                            registrarAuditoria("Producto","Eliminar",valor, " ");
                        }
                        entityManager.flush();
                    }
                    
                    Articulo a=entityManager.find(Articulo.class,Integer.parseInt(tf_codigo.getText()) );
                    valor=a.toString();//guardamos el objeto antes de eliminar
                    entityManager.remove(a);
                    registrarAuditoria("Articulo","Eliminar",valor, " ");
                    entityManager.getTransaction().commit();
                   // entityManager.close();
                    JOptionPane.showMessageDialog(null, "EliminaciÃ³n Exitosa");
                    vaciar();
                    refrescar();
                }}}
    }//GEN-LAST:event_btn_eliminarActionPerformed

    

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_aceptar;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_cancelar1;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JButton btn_modificar;
    private javax.swing.JLabel cantidadMaximaLabel1;
    private javax.swing.JLabel cantidadMinimaLabel;
    private javax.swing.JLabel cantidadMinimaLabel1;
    private renderizar.CategArticuloRenderizar categArticuloRenderizar1;
    private java.util.List<bean.CategoriaArticulo> categoriaArticuloList;
    private javax.persistence.Query categoriaArticuloQuery;
    private javax.swing.JLabel codigoProveedorLabel;
    private javax.swing.JLabel codigoProveedorLabel1;
    private javax.swing.JLabel codigoProveedorLabel2;
    private javax.swing.JComboBox comboTipo;
    public static javax.swing.JComboBox combocat;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_buscarC;
    private javax.swing.JLabel lbl_codigo;
    private javax.swing.JLabel lbl_filtro;
    private javax.swing.JLabel lbl_nombre;
    private javax.swing.JLabel lbl_valor;
    private java.util.List<bean.Articulo> list;
    private javax.swing.JComboBox list_filtros;
    private javax.swing.JTable masterTable;
    private javax.swing.JLabel precioLabel;
    private javax.swing.JLabel precioLabel1;
    private java.util.List<bean.ProductoServicio> productoServicioList;
    private javax.persistence.Query productoServicioQuery;
    private java.util.List<bean.Proveedor> proveedorList;
    private javax.persistence.Query proveedorQuery;
    private javax.persistence.Query query;
    private javax.swing.JTextField tf_cantidadMaxima;
    private javax.swing.JTextField tf_cantidadMinima;
    private javax.swing.JTextField tf_cantidadStock;
    public static javax.swing.JTextField tf_categoria;
    public static javax.swing.JTextField tf_codigo;
    private javax.swing.JTextField tf_costo;
    public javax.swing.JTextField tf_nombre;
    private javax.swing.JTextField tf_precio;
    public static javax.swing.JTextField tf_proveedor;
    private javax.swing.JTextField tf_tipo;
    private javax.swing.JTextField tf_valor;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArticuloModificarEliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArticuloModificarEliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArticuloModificarEliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArticuloModificarEliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame=new ArticuloModificarEliminar();
                frame.setVisible(true);
                frame.setTitle("Modificar/Eliminar Articulo");
                frame.setLocationRelativeTo(null);
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }
        });
    }
    
     public static AuditoriaSistema registrarAuditoria(String accion,String tab, String antes, String despues){
         AuditoriaSistema as=new AuditoriaSistema();
                    as.setAccion(accion);
                    as.setTabla(tab);
                    as.setAntes(antes);
                    as.setDespues(despues);
                     //trabajamos con la fecha
                    Date fechaAuditoria=new Date();
                    DateFormat formato1=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
                    as.setFechaHora((formato1.format(fechaAuditoria)));
                    as.setUsuario(LoginView.nombreUsuario);
                    return as;
    }
    
    private Proveedor obtenerProveedor1(String nombre){
        EntityManagerFactory fact = Persistence.createEntityManagerFactory("proyectoPU");
        EntityManager ema = fact.createEntityManager();
        Query query = ema.createNamedQuery("Proveedor.findByRazonSocial");
        query.setParameter("razonSocial", tf_proveedor.getText());
        List<Proveedor> p = query.getResultList();
        Proveedor nom = null;
        try{
            nom = p.get(0);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e);
        }catch(NullPointerException e){
            System.out.println(e);
        }catch(Exception e){
            System.out.println("Algo pasÃ³");
        }
        
        ema.close();
        return nom;
    }
    private ProductoServicio obtenerProducto(String nombre){
        EntityManagerFactory fact = Persistence.createEntityManagerFactory("proyectoPU");
        EntityManager ema = fact.createEntityManager();
        Query query = ema.createNamedQuery("ProductoServicio.findByNombre");
        query.setParameter("nombre", nombre);
        List<ProductoServicio> p = query.getResultList();
        ProductoServicio nom = null;
        try{
            nom = p.get(0);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e);
        }catch(NullPointerException e){
            System.out.println(e);
        }catch(Exception e){
            System.out.println("Algo pasÃ³");
        }
        
        ema.close();
        return nom;
    }
    
     private void inicializarLista1(){
        EntityManagerFactory fact = Persistence.createEntityManagerFactory("proyectoPU");
        EntityManager ema = fact.createEntityManager();
        Query query = ema.createNamedQuery("Proveedor.findAll");
        List<Proveedor> pro = query.getResultList();
        Iterator <Proveedor> it = pro.iterator();
        while (it.hasNext()){
            textAutoCompleter1.addItem(it.next().getRazonSocial());
       //     textAutoCompleter1.addItem(it.next().getRazonSocial());
       //     textAutoCompleter2.addItem(it.next().getRazonSocial());
        }
        ema.close();
    }
     public void vaciar(){
                btn_eliminar.setEnabled(false);
                btn_modificar.setEnabled(false);
                btn_guardar.setEnabled(false);
                comboTipo.setEnabled(false);
                combocat.setEnabled(false);
                btn_aceptar.setEnabled(false);
                tf_codigo.setText(" ");
                tf_nombre.setText(" ");
                tf_cantidadStock.setText(" ");
                tf_cantidadMinima.setText(" ");
                tf_cantidadMaxima.setText(" ");
                tf_costo.setText(" ");
                tf_categoria.setText(" ");
                tf_proveedor.setText(" ");
                tf_precio.setText(" ");
                tf_tipo.setText(" ");
                tf_codigo.setText(" ");
                tf_nombre.setEnabled(false);
                tf_cantidadStock.setEnabled(false);
                tf_cantidadMinima.setEnabled(false);
                tf_cantidadMaxima.setEnabled(false);
                tf_costo.setEnabled(false);
                tf_categoria.setEnabled(false);
                tf_proveedor.setEnabled(false);
                tf_precio.setEnabled(false);
                tf_tipo.setEnabled(false);
                 
     }
     public void refrescar(){
          query=entityManager.createNamedQuery( "Articulo.findAll");
               // query.setParameter("codigoArticulo", id);
                List<Articulo> a=query.getResultList();
               
                list.clear();
                list.addAll(a);

     }
}
