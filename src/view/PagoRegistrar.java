/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

//import javaapplication1.Proveedor;be
import bean.AuditoriaSistema;
import bean.CuentaBancaria;
import bean.DetallePago;
import bean.ExtraccionDeposito;
import bean.FacturaPago;
import bean.Informerecepcion;
import bean.Pago;
import bean.Proveedor;
import com.mxrck.autocompleter.TextAutoCompleter;
import java.awt.EventQueue;
import java.beans.Beans;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.RollbackException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tammy
 */
public class PagoRegistrar extends javax.swing.JFrame {
    private int fila,i, cont, fact;
    private String  prov;
    private int resp;
    public static int montoTotal = 0, cuentaBancaria;
    private String  proveedor;
    private int numFacturaDetalle;
    private int total, totalCuenta, totalPago;
  
    public PagoRegistrar() {
        initComponents();
         tf_monto.setText("0");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("proyectoPU").createEntityManager();
        facturaPagoQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT f FROM FacturaPago f");
        facturaPagoList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : facturaPagoQuery.getResultList();
        proveedorQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM Proveedor p");
        proveedorList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : proveedorQuery.getResultList();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM Pago p");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        cuentaBancariaQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT c FROM CuentaBancaria c");
        cuentaBancariaList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : cuentaBancariaQuery.getResultList();
        extraccionDepositoQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT e FROM ExtraccionDeposito e");
        extraccionDepositoList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(extraccionDepositoQuery.getResultList());
        informerecepcionQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT i FROM Informerecepcion i");
        informerecepcionList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : informerecepcionQuery.getResultList();
        masterScrollPane = new javax.swing.JScrollPane();
        tablaPago = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        lbl_buscarC = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbl_filtro = new javax.swing.JLabel();
        btn_buscar = new javax.swing.JButton();
        lbl_filtro1 = new javax.swing.JLabel();
        jf_fechaHasta = new com.toedter.calendar.JDateChooser();
        jf_fechaDesde = new com.toedter.calendar.JDateChooser();
        jPanel6 = new javax.swing.JPanel();
        btn_cancelar3 = new javax.swing.JButton();
        btn_guardar = new javax.swing.JButton();
        codigoProveedorLabel = new javax.swing.JLabel();
        tf_monto = new javax.swing.JTextField();

        FormListener formListener = new FormListener();

        jScrollPane1.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tablaPago.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proveedor", "MontoTotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPago.addMouseListener(formListener);
        masterScrollPane.setViewportView(tablaPago);

        jPanel3.setBackground(new java.awt.Color(0, 153, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        lbl_buscarC.setFont(new java.awt.Font("Corbel", 1, 30)); // NOI18N
        lbl_buscarC.setForeground(new java.awt.Color(255, 255, 255));
        lbl_buscarC.setText("Registrar Pago");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_buscarC)
                .addGap(323, 323, 323))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_buscarC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_filtro.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        lbl_filtro.setText("Hasta:");

        btn_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/zoom.png"))); // NOI18N
        btn_buscar.setText("Buscar");
        btn_buscar.addActionListener(formListener);
        btn_buscar.addFocusListener(formListener);

        lbl_filtro1.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        lbl_filtro1.setText("Desde:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(lbl_filtro1)
                .addGap(18, 18, 18)
                .addComponent(jf_fechaDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(lbl_filtro)
                .addGap(18, 18, 18)
                .addComponent(jf_fechaHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(btn_buscar)
                .addContainerGap(240, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_buscar)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jf_fechaHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jf_fechaDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbl_filtro)
                                .addComponent(lbl_filtro1)))))
                .addContainerGap())
        );

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btn_cancelar3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete.png"))); // NOI18N
        btn_cancelar3.setText("Cancelar");
        btn_cancelar3.addActionListener(formListener);

        btn_guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar.png"))); // NOI18N
        btn_guardar.setText("Confirmar Pago");
        btn_guardar.setEnabled(false);
        btn_guardar.addActionListener(formListener);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btn_guardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(btn_cancelar3)
                .addGap(22, 22, 22))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_cancelar3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        codigoProveedorLabel.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        codigoProveedorLabel.setText("Monto Total:");

        tf_monto.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(286, 286, 286))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(codigoProveedorLabel)
                                .addGap(358, 358, 358)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tf_monto, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf_monto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codigoProveedorLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, java.awt.event.MouseListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == btn_buscar) {
                PagoRegistrar.this.btn_buscarActionPerformed(evt);
            }
            else if (evt.getSource() == btn_cancelar3) {
                PagoRegistrar.this.btn_cancelar3ActionPerformed(evt);
            }
            else if (evt.getSource() == btn_guardar) {
                PagoRegistrar.this.btn_guardarActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == btn_buscar) {
                PagoRegistrar.this.btn_buscarFocusLost(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == tablaPago) {
                PagoRegistrar.this.tablaPagoMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed

        if (jf_fechaDesde.getAccessibleContext()==null || jf_fechaHasta.getAccessibleContext()==null)
            {
            JOptionPane.showMessageDialog(null,"No se permiten campos con valores nulos", "Error",JOptionPane.ERROR_MESSAGE);
            return;
            }
        if ((  jf_fechaHasta.getDate().before(jf_fechaDesde.getDate())))
            {
            JOptionPane.showMessageDialog(null,"Ingrese correctamente el rango de fechas", "Error",JOptionPane.ERROR_MESSAGE);
            return;
            }
        
        else{
        
        
        
       SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
                     String d1 = format.format(jf_fechaDesde.getDate());
                      String d2 = format.format(jf_fechaHasta.getDate());
                     Date fechaDesde = null;
                     Date fechaHasta = null;
                     try {
                         fechaDesde = format.parse(d1);
                         fechaHasta = format.parse(d2);
                    
                       
                     } catch (ParseException ex) {
                         System.out.println("Formateo de fechas fallido");
                     }
                     System.out.print(d1 +"  "+d2);
          /*  facturaPagoQuery=entityManager.createNativeQuery("select * from factura_pago" 
                                       + " where estado='pendiente' "  
                                     +"AND STR_TO_DATE(fecha_vence , '%d/%m/%Y') "+
            "BETWEEN STR_TO_DATE('"+d1+"', '%d/%m/%Y ') "+
            "AND STR_TO_DATE('"+d2+"', '%d/%m/%Y ') ", FacturaPago.class);*/
            informerecepcionQuery=entityManager.createNativeQuery("select * from  informerecepcion i " 
                    +"join factura_pago fp "
                    +"on fp.num_factura=i.nroFactura "
                    +"join orden_compra oc "
                    +"on oc.cod_orden=i.codOC "
                    +"where fp.estado='pendiente' "
                    +"AND STR_TO_DATE(fp.fecha_vence , '%d/%m/%Y') "
                    +"BETWEEN STR_TO_DATE('"+d1+"', '%d/%m/%Y ') "
                    +"AND STR_TO_DATE('"+d2+"', '%d/%m/%Y ') "
                     , Informerecepcion.class);
                List<Informerecepcion> p=informerecepcionQuery.getResultList();
                if (p.isEmpty()){
                    JOptionPane.showMessageDialog(null,"Sin cuentas pendientes de pago", "Error",JOptionPane.ERROR_MESSAGE);
                    jf_fechaDesde.requestFocus();
                }
                else{
                    btn_guardar.setEnabled(true);
                    for (int j=0;j<p.size();j++){
                         if (validar(p.get(i).getCodOC().getCodProveedor().getRazonSocial()) == false){
                        // if (validar(p.get(j).gegetCodProveedor().getRazonSocial()) == false){
                     query=entityManager.createNativeQuery("select sum(fp.monto_total) "
                     +"from informerecepcion i "
                     +"join factura_pago fp "
                    +"on fp.num_factura=i.nroFactura "
                    +"join orden_compra oc "
                    +"on oc.cod_orden=i.codOC "
                    +"where fp.estado='pendiente' "
                    +"AND STR_TO_DATE(fp.fecha_vence , '%d/%m/%Y') "
                    +"BETWEEN STR_TO_DATE('"+d1+"', '%d/%m/%Y ') "
                    +"AND STR_TO_DATE('"+d2+"', '%d/%m/%Y ') "
                    +"and oc.cod_proveedor= "+(p.get(j).getCodOC().getCodProveedor().getCodigoProveedor())
                    +" GROUP BY oc.cod_proveedor");
     
                    Object resultado2=query.getSingleResult();          
                      totalPago=Integer.parseInt(resultado2.toString());
                      
                      Proveedor p1= obtenerProveedorCodigo(p.get(j).getCodOC().getCodProveedor().getCodigoProveedor());
                     proveedor=p1.getRazonSocial();
                     
                      inicializar_tabla(proveedor, totalPago);
                }}
                
                
                }
                calcularMonto();
        }
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void btn_buscarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_buscarFocusLost
        // TODO add your handling code here:
//        tf_proveedor.setText(null);
    }//GEN-LAST:event_btn_buscarFocusLost

    private void tablaPagoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPagoMouseClicked
         
    }//GEN-LAST:event_tablaPagoMouseClicked

    private void btn_cancelar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelar3ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_btn_cancelar3ActionPerformed

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        // TODO add your handling code here:
         resp=  JOptionPane.showConfirmDialog(null,"Desea registrar los pagos?", "Confirmar pago",JOptionPane.YES_NO_OPTION );
            if (resp==JOptionPane.YES_OPTION){
                calcularMonto();
                
                 //verifica que se cuenta con fondos
               cuentaBancariaQuery=entityManager.createNativeQuery(" select sum(monto_actual) " +
                                                "from cuenta_bancaria ");
                Object resultado=cuentaBancariaQuery.getSingleResult();
                totalCuenta=Integer.parseInt(resultado.toString());
                
                System.out.print(totalCuenta+"  "+montoTotal);
                if (totalCuenta<Integer.parseInt(tf_monto.getText())){
                    JOptionPane.showMessageDialog(null,"No posee cuentas con el monto solicitado", "Error",JOptionPane.ERROR_MESSAGE);
                   salir();
                }
               
        else{
             entityManager.getTransaction().begin();
             Date fechap=new Date();
             DateFormat formato1=new SimpleDateFormat("dd/MM/yyyy");
                    
             cont= tablaPago.getRowCount();
         System.out.print(fila);
        for (i=0; i<cont;i++){
           prov = (String) tablaPago.getValueAt(i, 0 );
           total=(Integer.valueOf(tablaPago.getValueAt(i, 1 ).toString()));
           
            Proveedor p1 = obtenerProveedorNombre(prov);
            Pago pg = new Pago();
            pg.setFecha((formato1.format(fechap)));
            pg.setCodProveedor(p1);
            pg.setMontoTotal((total));    
            entityManager.persist(registrarAuditoria("Crecion", "Pago", pg.toString()));
            entityManager.persist(pg);
            entityManager.flush();
            
            buscarCuentaBancaria();
      
        //Crear Extraccion
       for (int l=0;l<PagoDialogoCuenta.tablaBanco.getRowCount();l++){
           
           
                  ExtraccionDeposito extraccion= new ExtraccionDeposito();
                  extraccion.setFecha((formato1.format(fechap)));
                  extraccion.setMonto(Integer.parseInt(PagoDialogoCuenta.tablaBanco.getValueAt(l, 3).toString()));
                  extraccion.setTipo("E");
                  CuentaBancaria cb =  obtenerCuenta (Integer.valueOf(PagoDialogoCuenta.tablaBanco.getValueAt(l,0).toString()));
                  extraccion.setIdCuentaBancaria(cb); 
                 // extraccion.setIdPagoCobro(Integer.valueOf(PagoDialogoCuenta.tablaBanco.getValueAt(l,0).toString()));
                   entityManager.persist(extraccion);
                   entityManager.flush();
                   entityManager.persist(registrarAuditoria("Crecion","Extraccion",extraccion.toString()));
                
                   //creacion detalle pago
                   detallePago(pg, extraccion);
       }
       actualizarFacturas();//falta detallePago 
       entityManager.getTransaction().commit();
                      entityManager.close();
        }
                      JOptionPane.showMessageDialog(null,"Pago Exitoso", "Confirmación",JOptionPane.INFORMATION_MESSAGE);
        }
            }
           vaciar();
   
    }//GEN-LAST:event_btn_guardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_cancelar3;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JLabel codigoProveedorLabel;
    private java.util.List<bean.CuentaBancaria> cuentaBancariaList;
    private javax.persistence.Query cuentaBancariaQuery;
    private javax.persistence.EntityManager entityManager;
    private java.util.List<bean.ExtraccionDeposito> extraccionDepositoList;
    private javax.persistence.Query extraccionDepositoQuery;
    private java.util.List<bean.FacturaPago> facturaPagoList;
    private javax.persistence.Query facturaPagoQuery;
    private java.util.List<bean.Informerecepcion> informerecepcionList;
    private javax.persistence.Query informerecepcionQuery;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private com.toedter.calendar.JDateChooser jf_fechaDesde;
    private com.toedter.calendar.JDateChooser jf_fechaHasta;
    private javax.swing.JLabel lbl_buscarC;
    private javax.swing.JLabel lbl_filtro;
    private javax.swing.JLabel lbl_filtro1;
    private java.util.List<bean.Pago> list;
    private javax.swing.JScrollPane masterScrollPane;
    private java.util.List<bean.Proveedor> proveedorList;
    private javax.persistence.Query proveedorQuery;
    private javax.persistence.Query query;
    private static javax.swing.JTable tablaPago;
    public static javax.swing.JTextField tf_monto;
    // End of variables declaration//GEN-END:variables
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PagoRegistrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PagoRegistrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PagoRegistrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PagoRegistrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
       // EventQueue.invokeLater(new Runnable() {
        java.awt.EventQueue.invokeLater(new Runnable(){
                public void run() {
                JFrame frame=new PagoRegistrar();
                frame.setVisible(true);
                frame.setTitle("Registar Pago");
                frame.setLocationRelativeTo(null);
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }
        });
    }

    private Proveedor obtenerProveedorNombre(String nombre){
        EntityManagerFactory fact = Persistence.createEntityManagerFactory("proyectoPU");
        EntityManager ema = fact.createEntityManager();
        Query query = ema.createNamedQuery("Proveedor.findByRazonSocial");
        query.setParameter("razonSocial", nombre);
        List<Proveedor> p = query.getResultList();
        Proveedor nom = null;
        try{
            nom = p.get(0);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e);
        }catch(NullPointerException e){
            System.out.println(e);
        }catch(Exception e){
            System.out.println("Algo pasó");
        }
        
        ema.close();
        return nom;
    }
    
    private Proveedor obtenerProveedorCodigo(int cod){
        EntityManagerFactory fact = Persistence.createEntityManagerFactory("proyectoPU");
        EntityManager ema = fact.createEntityManager();
        Query query = ema.createNamedQuery("Proveedor.findByCodigoProveedor");
        query.setParameter("codigoProveedor", cod);
        List<Proveedor> p = query.getResultList();
        Proveedor nom = null;
        try{
            nom = p.get(0);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e);
        }catch(NullPointerException e){
            System.out.println(e);
        }catch(Exception e){
            System.out.println("Algo pasó");
        }
        
        ema.close();
        return nom;
    }

    private static  void calcularMonto() {
        montoTotal=0;
                  int rowCount=tablaPago.getRowCount();
                        for (int i = 0; i < rowCount; i++) {
                           montoTotal=(Integer.parseInt(tablaPago.getValueAt(i, 1).toString())+montoTotal);
                         //  cant=tablaCompra.getValueAt(i, 3).toString();
                          
                        }
           tf_monto.setText(String.valueOf(montoTotal));
    }

    private void actualizarFacturas() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        
                     String d1 = format.format(jf_fechaDesde.getDate());
                      String d2 = format.format(jf_fechaHasta.getDate());
                     Date fechaDesde = null;
                     Date fechaHasta = null;
                     try {
                         fechaDesde = format.parse(d1);
                         fechaHasta = format.parse(d2);  
                     } catch (ParseException ex) {
                         System.out.println("Formateo de fechas fallido");
                     }

        cont=tablaPago.getRowCount();
        for (i=0;i<cont;i++){
         
           prov= (String)tablaPago.getValueAt( i,0);
           Proveedor p1 = obtenerProveedorNombre(prov);
          facturaPagoQuery=entityManager.createNativeQuery/*("select * from factura_pago" 
                                       + " where estado='pendiente' "                                     
                                     +"AND STR_TO_DATE(fecha_vence , '%d/%m/%Y') "+
            "BETWEEN STR_TO_DATE('"+d1+"', '%d/%m/%Y %H') "+
            "AND STR_TO_DATE('"+d2+"', '%d/%m/%Y %H') "+
            "AND cod_proveedor= "+
             p1.getCodigoProveedor(), FacturaPago.class);*/
           ("select * from factura_pago fp " 
                    +"join  informerecepcion i "
                    +"on fp.num_factura=i.nroFactura "
                    +"join orden_compra oc "
                    +"on oc.cod_orden=i.codOC "
                    +"where fp.estado='pendiente' "
                    +"AND STR_TO_DATE(fp.fecha_vence , '%d/%m/%Y') "
                    +"BETWEEN STR_TO_DATE('"+d1+"', '%d/%m/%Y ') "
                    +"AND STR_TO_DATE('"+d2+"', '%d/%m/%Y ') "
                    +" and oc.cod_proveedor= "+(p1.getCodigoProveedor())
                     , FacturaPago.class);
            List<FacturaPago> p=facturaPagoQuery.getResultList();
            for (int j=0;j<p.size();j++){
                
                FacturaPago fpg= new FacturaPago();
                fpg.setNumFactura(p.get(j).getNumFactura());
                fpg.setFecha(p.get(j).getFecha());
            //    fpg.setOrdenCompra(p.get(j).getOrdenCompra());
                fpg.setEstado("pagado");
                fpg.setMontoTotal(p.get(j).getMontoTotal());
                fpg.setMontoTotalIva(p.get(j).getMontoTotalIva());
              //  fpg.setCodProveedor(p.get(j).getCodProveedor());
                fpg.setFechaVence(p.get(j).getFechaVence());
    //            entityManager.getTransaction().begin();
                entityManager.merge(fpg);
                entityManager.flush();
            }    
        }
    }
 

     private void detallePago(Pago detPago, ExtraccionDeposito detExt) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat formato1=new SimpleDateFormat("dd/MM/yyyy");
        Date fechap=new Date();
                     String d1 = format.format(jf_fechaDesde.getDate());
                      String d2 = format.format(jf_fechaHasta.getDate());
                     Date fechaDesde = null;
                     Date fechaHasta = null;
                     try {
                         fechaDesde = format.parse(d1);
                         fechaHasta = format.parse(d2);  
                     } catch (ParseException ex) {
                         System.out.println("Formateo de fechas fallido");
                     }

             /*facturaPagoQuery=entityManager.createNativeQuery("select * from factura_pago" 
                                       + " where estado='pendiente' "                                     
                                     +"and STR_TO_DATE(fecha_vence , '%d/%m/%Y') "+
            "BETWEEN STR_TO_DATE('"+d1+"', '%d/%m/%Y ') "+
            "AND STR_TO_DATE('"+d2+"', '%d/%m/%Y ') "+
            "AND cod_proveedor= "+detPago.getCodProveedor().getCodigoProveedor(), FacturaPago.class);
              List<FacturaPago> p=facturaPagoQuery.getResultList()*/
                      facturaPagoQuery=entityManager.createNativeQuery/*("select * from factura_pago" 
                                       + " where estado='pendiente' "                                     
                                     +"AND STR_TO_DATE(fecha_vence , '%d/%m/%Y') "+
            "BETWEEN STR_TO_DATE('"+d1+"', '%d/%m/%Y %H') "+
            "AND STR_TO_DATE('"+d2+"', '%d/%m/%Y %H') "+
            "AND cod_proveedor= "+
             p1.getCodigoProveedor(), FacturaPago.class);*/
           ("select * from factura_pago fp " 
                    +"join  informerecepcion i "
                    +"on fp.num_factura=i.nroFactura "
                    +"join orden_compra oc "
                    +"on oc.cod_orden=i.codOC "
                    +"where fp.estado='pendiente' "
                    +"AND STR_TO_DATE(fp.fecha_vence , '%d/%m/%Y') "
                    +"BETWEEN STR_TO_DATE('"+d1+"', '%d/%m/%Y ') "
                    +"AND STR_TO_DATE('"+d2+"', '%d/%m/%Y ') "
                    +" and oc.cod_proveedor= "+detPago.getCodProveedor().getCodigoProveedor()
                     , FacturaPago.class);
            List<FacturaPago> p=facturaPagoQuery.getResultList();
             
            for (int j=0;j<p.size();j++){
                numFacturaDetalle=p.get(j).getNumFactura();
                DetallePago dp= new DetallePago();
                dp.setIdPago(detPago);
                dp.setIdExtraccion(detExt);
                dp.setNumFactura(obtenerFactura(numFacturaDetalle));
                entityManager.persist(dp);
                entityManager.flush();
           } 
    }

    private void buscarCuentaBancaria() {
           new PagoDialogoCuenta(this, true).setVisible(true);
         System.out.print("cuenta"+cuentaBancaria);
    }
      
 public void salir(){
     JOptionPane.showMessageDialog(null,"No puede realizar el pago", "Error",JOptionPane.ERROR_MESSAGE);
     tf_monto.setText("");
    dispose();
 }

    private CuentaBancaria obtenerCuenta(int cod){
        EntityManagerFactory fact2 = Persistence.createEntityManagerFactory("proyectoPU");
        EntityManager ema = fact2.createEntityManager();
        Query query2 = ema.createNamedQuery("CuentaBancaria.findByIdCuentaBancaria");
        query2.setParameter("idCuentaBancaria", cod);
        List<CuentaBancaria> p = query2.getResultList();
        CuentaBancaria nom = null;
        try{
            nom = p.get(0);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e);
        }catch(NullPointerException e){
            System.out.println(e);
        }catch(Exception e){
            System.out.println("Algo pasó");
        }
        
        ema.close();
        return nom;
    }
    private Pago obtenerPago(int cod){
        EntityManagerFactory fact3 = Persistence.createEntityManagerFactory("proyectoPU");
        EntityManager ema = fact3.createEntityManager();
        Query query3 = ema.createNamedQuery("Pago.findByCodigoPago");
        query3.setParameter("codigoPago", cod);
        List<Pago> p = query3.getResultList();
        Pago nom = null;
        try{
            nom = p.get(0);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e);
        }catch(NullPointerException e){
            System.out.println(e);
        }catch(Exception e){
            System.out.println("Algo pasó");
        }
        ema.close();
        return nom;
    }
     
    private FacturaPago obtenerFactura(int cod){
        EntityManagerFactory fact4 = Persistence.createEntityManagerFactory("proyectoPU");
        EntityManager ema = fact4.createEntityManager();
        Query query4 = ema.createNamedQuery("FacturaPago.findByNumFactura");
        query4.setParameter("numFactura", cod);
        List<FacturaPago> p = query4.getResultList();
        FacturaPago nom = null;
        try{
            nom = p.get(0);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e);
        }catch(NullPointerException e){
            System.out.println(e);
        }catch(Exception e){
            System.out.println("Algo pasó");
        }
        
        ema.close();
        return nom;
    }
    
public static AuditoriaSistema registrarAuditoria(String accion,String tab, String datos){
         AuditoriaSistema as=new AuditoriaSistema();
                    as.setAccion(accion);
                    as.setTabla(tab);
                    as.setAntes(datos);
                    as.setDespues("No hay cambios");
                     //trabajamos con la fecha
                    Date fechaAuditoria=new Date();
                    DateFormat formato1=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
                    as.setFechaHora((formato1.format(fechaAuditoria)));
                    as.setUsuario(LoginView.nombreUsuario);
                    return as;
    }
public static void inicializar_tabla( String proveedor, int total) {
        
        DefaultTableModel dtm = (DefaultTableModel) tablaPago.getModel();
        String[] fila = new String[2];
        fila[0] = proveedor;
        fila[1] = String.valueOf(total);
        
        dtm.addRow(fila);
        tablaPago.setModel(dtm);
        
       calcularMonto();
     
}
public static boolean validar(String ent) {
        int  c=0;
        for (int j=0;j<tablaPago.getRowCount();j++){
                            if (tablaPago.getValueAt(j, 0).toString().equals(ent)){
                               c=c+1; //repetido
                            }
        }
      if (c==0){
          //no se agrego aun a la tabla
          return false;
      }
      else{
          //ya existe en la tabla
          return true;
      }
}    

        public void vaciar(){
            tf_monto.setText(null);
            vaciar_tabla_pago();
            btn_guardar.setEnabled(false);
        } 
        
        public static void vaciar_tabla_pago() {
       tablaPago.setModel(new DefaultTableModel(
                new Object[][]{},
                new String[]{
                     "Proveedor", "Monto Total"
                }) {

            boolean[] canEdit = new boolean[]{
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        tablaPago.getTableHeader().setReorderingAllowed(false);
       
    }
}
